# Single comprehensive Alpine-based image for protobuf generation
FROM alpine:3.19

# Base system tools
RUN apk add --no-cache \
    git \
    bash \
    wget \
    unzip

# Language runtimes
RUN apk add --no-cache \
    python3 \
    py3-pip \
    nodejs \
    npm

# Install Go 1.23 manually (Alpine's Go is too old)
RUN GO_VERSION=1.23.4 && \
    ARCH=$(uname -m) && \
    case ${ARCH} in \
        x86_64) GO_ARCH="amd64" ;; \
        aarch64) GO_ARCH="arm64" ;; \
        armv7l) GO_ARCH="armv6l" ;; \
        i386|i686) GO_ARCH="386" ;; \
        *) echo "Unsupported Go architecture: ${ARCH}" && exit 1 ;; \
    esac && \
    wget -O /tmp/go.tar.gz "https://go.dev/dl/go${GO_VERSION}.linux-${GO_ARCH}.tar.gz" && \
    tar -C /usr/local -xzf /tmp/go.tar.gz && \
    rm /tmp/go.tar.gz

# Build tools for compilation
RUN apk add --no-cache \
    gcc \
    musl-dev \
    linux-headers

# Install protoc binary (configurable version and auto-detect architecture)
ARG PROTOC_VERSION=31.1
RUN ARCH=$(uname -m) && \
    case ${ARCH} in \
        x86_64) PROTOC_ARCH="linux-x86_64" ;; \
        aarch64) PROTOC_ARCH="linux-aarch_64" ;; \
        armv7l) PROTOC_ARCH="linux-armv7" ;; \
        ppc64le) PROTOC_ARCH="linux-ppcle_64" ;; \
        s390x) PROTOC_ARCH="linux-s390_64" ;; \
        i386|i686) PROTOC_ARCH="linux-x86_32" ;; \
        *) echo "Unsupported architecture: ${ARCH}" && exit 1 ;; \
    esac && \
    echo "Installing protoc ${PROTOC_VERSION} for ${PROTOC_ARCH}" && \
    wget -O /tmp/protoc.zip "https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-${PROTOC_ARCH}.zip" && \
    unzip /tmp/protoc.zip -d /usr/local && \
    chmod +x /usr/local/bin/protoc && \
    rm /tmp/protoc.zip && \
    protoc --version

# Set up Go environment
ENV GOROOT=/usr/local/go
ENV GOPATH=/go
ENV PATH=$GOROOT/bin:$GOPATH/bin:/usr/local/bin:$PATH
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 755 "$GOPATH" && \
    go version

# Install Go protobuf plugins
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@latest && \
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest && \
    go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest && \
    go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger@latest

# Install Python protobuf plugins (bypass PEP 668 in container)
RUN pip install --no-cache-dir --break-system-packages \
    grpcio-tools \
    grpcio \
    googleapis-common-protos \
    mypy-protobuf

# Install JavaScript/Node.js protobuf tools (without problematic npm protoc-gen-js)
RUN npm install -g \
    google-protobuf \
    @grpc/grpc-js \
    @grpc/proto-loader \
    grpc-tools \
    grpc_tools_node_protoc_ts \
    ts-protoc-gen

# Install official protobuf-javascript with architecture detection
ARG PROTOBUF_JS_VERSION=3.21.4
RUN ARCH=$(uname -m) && \
    case ${ARCH} in \
        x86_64) PROTOBUF_JS_ARCH="linux-x86_64" ;; \
        aarch64) PROTOBUF_JS_ARCH="linux-aarch_64" ;; \
        armv7l) echo "ARM v7 not supported by protobuf-javascript" && exit 1 ;; \
        ppc64le) PROTOBUF_JS_ARCH="linux-ppcle_64" ;; \
        s390x) PROTOBUF_JS_ARCH="linux-s390_64" ;; \
        i386|i686) PROTOBUF_JS_ARCH="linux-x86_32" ;; \
        *) echo "Unsupported architecture for protobuf-javascript: ${ARCH}" && exit 1 ;; \
    esac && \
    echo "Installing protobuf-javascript ${PROTOBUF_JS_VERSION} for ${PROTOBUF_JS_ARCH}" && \
    wget -O /tmp/protobuf-js.tar.gz "https://github.com/protocolbuffers/protobuf-javascript/releases/download/v${PROTOBUF_JS_VERSION}/protobuf-javascript-${PROTOBUF_JS_VERSION}-${PROTOBUF_JS_ARCH}.tar.gz" && \
    tar -C /tmp -xzf /tmp/protobuf-js.tar.gz && \
    cp /tmp/bin/protoc-gen-js /usr/local/bin/protoc-gen-js && \
    chmod +x /usr/local/bin/protoc-gen-js && \
    rm -rf /tmp/protobuf-js.tar.gz /tmp/bin

# Install glibc compatibility and verify installation
RUN apk add --no-cache gcompat && \
    protoc --version && \
    which protoc-gen-js && \
    echo "protoc and protoc-gen-js are ready"

WORKDIR /workspace
ENTRYPOINT ["bash", "protobuf/build.sh"]