//
//SPDX-License-Identifier: MIT
//
//Copyright (c) 2023, SCANOSS
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in
//all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.

//*
// Geo Provenance definition details

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v5.27.3
// source: scanoss/api/provenance/v2/scanoss-provenance.proto

package geoprovenancev2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	commonv2 "github.com/scanoss/papi/api/commonv2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Component level Provenance Response data (JSON payload)
type ContributorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provenance details
	Purls []*ContributorResponse_Purls `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ContributorResponse) Reset() {
	*x = ContributorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorResponse) ProtoMessage() {}

func (x *ContributorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorResponse.ProtoReflect.Descriptor instead.
func (*ContributorResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescGZIP(), []int{0}
}

func (x *ContributorResponse) GetPurls() []*ContributorResponse_Purls {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *ContributorResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

//*
// Component level Origin Response data (JSON payload)
type OriginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Geo Provenance details
	Purls []*OriginResponse_Purls `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *OriginResponse) Reset() {
	*x = OriginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginResponse) ProtoMessage() {}

func (x *OriginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginResponse.ProtoReflect.Descriptor instead.
func (*OriginResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescGZIP(), []int{1}
}

func (x *OriginResponse) GetPurls() []*OriginResponse_Purls {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *OriginResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Declared location for the project
type ContributorResponse_DeclaredLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Declared location could be either from the owner or a contributor
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Country/State/City/Province/Place declared on the repo
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ContributorResponse_DeclaredLocation) Reset() {
	*x = ContributorResponse_DeclaredLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributorResponse_DeclaredLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorResponse_DeclaredLocation) ProtoMessage() {}

func (x *ContributorResponse_DeclaredLocation) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorResponse_DeclaredLocation.ProtoReflect.Descriptor instead.
func (*ContributorResponse_DeclaredLocation) Descriptor() ([]byte, []int) {
	return file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ContributorResponse_DeclaredLocation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContributorResponse_DeclaredLocation) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Curated provenance information about the project
type ContributorResponse_CuratedLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Country for the owner or contributor
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	// Occurrences for users or contributors of this specific country
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ContributorResponse_CuratedLocation) Reset() {
	*x = ContributorResponse_CuratedLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributorResponse_CuratedLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorResponse_CuratedLocation) ProtoMessage() {}

func (x *ContributorResponse_CuratedLocation) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorResponse_CuratedLocation.ProtoReflect.Descriptor instead.
func (*ContributorResponse_CuratedLocation) Descriptor() ([]byte, []int) {
	return file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ContributorResponse_CuratedLocation) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ContributorResponse_CuratedLocation) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Information about a given purl
type ContributorResponse_Purls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The purl string
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// The purl version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // TODO do we actually need/know the version?
	// List of locations declared on user repository
	DeclaredLocations []*ContributorResponse_DeclaredLocation `protobuf:"bytes,3,rep,name=declared_locations,json=declaredLocations,proto3" json:"declared_locations,omitempty"`
	// List of craft curated location
	CuratedLocations []*ContributorResponse_CuratedLocation `protobuf:"bytes,4,rep,name=curated_locations,json=curatedLocations,proto3" json:"curated_locations,omitempty"`
}

func (x *ContributorResponse_Purls) Reset() {
	*x = ContributorResponse_Purls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributorResponse_Purls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorResponse_Purls) ProtoMessage() {}

func (x *ContributorResponse_Purls) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorResponse_Purls.ProtoReflect.Descriptor instead.
func (*ContributorResponse_Purls) Descriptor() ([]byte, []int) {
	return file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ContributorResponse_Purls) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ContributorResponse_Purls) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ContributorResponse_Purls) GetDeclaredLocations() []*ContributorResponse_DeclaredLocation {
	if x != nil {
		return x.DeclaredLocations
	}
	return nil
}

func (x *ContributorResponse_Purls) GetCuratedLocations() []*ContributorResponse_CuratedLocation {
	if x != nil {
		return x.CuratedLocations
	}
	return nil
}

// Origin country details
type OriginResponse_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the country
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Percentage of developers
	Percentage uint32 `protobuf:"varint,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *OriginResponse_Location) Reset() {
	*x = OriginResponse_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginResponse_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginResponse_Location) ProtoMessage() {}

func (x *OriginResponse_Location) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginResponse_Location.ProtoReflect.Descriptor instead.
func (*OriginResponse_Location) Descriptor() ([]byte, []int) {
	return file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescGZIP(), []int{1, 0}
}

func (x *OriginResponse_Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OriginResponse_Location) GetPercentage() uint32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// Information about the given PURL
type OriginResponse_Purls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The purl string
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// The list of countries with contributors
	Locations []*OriginResponse_Location `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *OriginResponse_Purls) Reset() {
	*x = OriginResponse_Purls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginResponse_Purls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginResponse_Purls) ProtoMessage() {}

func (x *OriginResponse_Purls) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginResponse_Purls.ProtoReflect.Descriptor instead.
func (*OriginResponse_Purls) Descriptor() ([]byte, []int) {
	return file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescGZIP(), []int{1, 1}
}

func (x *OriginResponse_Purls) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *OriginResponse_Purls) GetLocations() []*OriginResponse_Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

var File_scanoss_api_provenance_v2_scanoss_provenance_proto protoreflect.FileDescriptor

var file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDesc = []byte{
	0x0a, 0x32, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x63, 0x61, 0x6e,
	0x6f, 0x73, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x1a,
	0x2a, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x04, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x05, 0x70, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x75, 0x72, 0x6c, 0x73, 0x52, 0x05, 0x70, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x63,
	0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x42, 0x0a, 0x10, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x41,
	0x0a, 0x0f, 0x43, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x92, 0x02, 0x0a, 0x05, 0x50, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x12, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x0e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x6c, 0x73, 0x52, 0x05, 0x70, 0x75, 0x72, 0x6c, 0x73,
	0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x3e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a,
	0x6d, 0x0a, 0x05, 0x50, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x50, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xb3,
	0x03, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x76, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x22, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x9a, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75,
	0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x63, 0x61, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65,
	0x6f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x67, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x42, 0xa5, 0x02, 0x92, 0x41, 0xe4, 0x01, 0x12, 0x7e, 0x0a, 0x1e, 0x53,
	0x43, 0x41, 0x4e, 0x4f, 0x53, 0x53, 0x20, 0x47, 0x45, 0x4f, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x57, 0x0a,
	0x16, 0x73, 0x63, 0x61, 0x6e, 0x6f, 0x73, 0x73, 0x2d, 0x67, 0x65, 0x6f, 0x2d, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x61, 0x6e,
	0x6f, 0x73, 0x73, 0x2f, 0x67, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x1a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x40, 0x73, 0x63, 0x61, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x32, 0x03, 0x32, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x52, 0x3b, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x5a,
	0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x61, 0x6e,
	0x6f, 0x73, 0x73, 0x2f, 0x70, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x76, 0x32, 0x3b, 0x67, 0x65, 0x6f,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescOnce sync.Once
	file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescData = file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDesc
)

func file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescGZIP() []byte {
	file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescOnce.Do(func() {
		file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescData = protoimpl.X.CompressGZIP(file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescData)
	})
	return file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDescData
}

var file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_scanoss_api_provenance_v2_scanoss_provenance_proto_goTypes = []interface{}{
	(*ContributorResponse)(nil),                  // 0: scanoss.api.provenance.v2.ContributorResponse
	(*OriginResponse)(nil),                       // 1: scanoss.api.provenance.v2.OriginResponse
	(*ContributorResponse_DeclaredLocation)(nil), // 2: scanoss.api.provenance.v2.ContributorResponse.DeclaredLocation
	(*ContributorResponse_CuratedLocation)(nil),  // 3: scanoss.api.provenance.v2.ContributorResponse.CuratedLocation
	(*ContributorResponse_Purls)(nil),            // 4: scanoss.api.provenance.v2.ContributorResponse.Purls
	(*OriginResponse_Location)(nil),              // 5: scanoss.api.provenance.v2.OriginResponse.Location
	(*OriginResponse_Purls)(nil),                 // 6: scanoss.api.provenance.v2.OriginResponse.Purls
	(*commonv2.StatusResponse)(nil),              // 7: scanoss.api.common.v2.StatusResponse
	(*commonv2.EchoRequest)(nil),                 // 8: scanoss.api.common.v2.EchoRequest
	(*commonv2.PurlRequest)(nil),                 // 9: scanoss.api.common.v2.PurlRequest
	(*commonv2.EchoResponse)(nil),                // 10: scanoss.api.common.v2.EchoResponse
}
var file_scanoss_api_provenance_v2_scanoss_provenance_proto_depIdxs = []int32{
	4,  // 0: scanoss.api.provenance.v2.ContributorResponse.purls:type_name -> scanoss.api.provenance.v2.ContributorResponse.Purls
	7,  // 1: scanoss.api.provenance.v2.ContributorResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	6,  // 2: scanoss.api.provenance.v2.OriginResponse.purls:type_name -> scanoss.api.provenance.v2.OriginResponse.Purls
	7,  // 3: scanoss.api.provenance.v2.OriginResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	2,  // 4: scanoss.api.provenance.v2.ContributorResponse.Purls.declared_locations:type_name -> scanoss.api.provenance.v2.ContributorResponse.DeclaredLocation
	3,  // 5: scanoss.api.provenance.v2.ContributorResponse.Purls.curated_locations:type_name -> scanoss.api.provenance.v2.ContributorResponse.CuratedLocation
	5,  // 6: scanoss.api.provenance.v2.OriginResponse.Purls.locations:type_name -> scanoss.api.provenance.v2.OriginResponse.Location
	8,  // 7: scanoss.api.provenance.v2.GeoProvenance.Echo:input_type -> scanoss.api.common.v2.EchoRequest
	9,  // 8: scanoss.api.provenance.v2.GeoProvenance.GetComponentContributors:input_type -> scanoss.api.common.v2.PurlRequest
	9,  // 9: scanoss.api.provenance.v2.GeoProvenance.GetComponentOrigin:input_type -> scanoss.api.common.v2.PurlRequest
	10, // 10: scanoss.api.provenance.v2.GeoProvenance.Echo:output_type -> scanoss.api.common.v2.EchoResponse
	0,  // 11: scanoss.api.provenance.v2.GeoProvenance.GetComponentContributors:output_type -> scanoss.api.provenance.v2.ContributorResponse
	1,  // 12: scanoss.api.provenance.v2.GeoProvenance.GetComponentOrigin:output_type -> scanoss.api.provenance.v2.OriginResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_scanoss_api_provenance_v2_scanoss_provenance_proto_init() }
func file_scanoss_api_provenance_v2_scanoss_provenance_proto_init() {
	if File_scanoss_api_provenance_v2_scanoss_provenance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributorResponse_DeclaredLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributorResponse_CuratedLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributorResponse_Purls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginResponse_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginResponse_Purls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scanoss_api_provenance_v2_scanoss_provenance_proto_goTypes,
		DependencyIndexes: file_scanoss_api_provenance_v2_scanoss_provenance_proto_depIdxs,
		MessageInfos:      file_scanoss_api_provenance_v2_scanoss_provenance_proto_msgTypes,
	}.Build()
	File_scanoss_api_provenance_v2_scanoss_provenance_proto = out.File
	file_scanoss_api_provenance_v2_scanoss_provenance_proto_rawDesc = nil
	file_scanoss_api_provenance_v2_scanoss_provenance_proto_goTypes = nil
	file_scanoss_api_provenance_v2_scanoss_provenance_proto_depIdxs = nil
}
