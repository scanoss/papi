//
//SPDX-License-Identifier: MIT
//
//Copyright (c) 2022, SCANOSS
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in
//all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.

//**
// Vulnerability definition details
//*

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: scanoss/api/vulnerabilities/v2/scanoss-vulnerabilities.proto

package vulnerabilitiesv2

import (
	context "context"
	commonv2 "github.com/scanoss/papi/api/commonv2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Vulnerabilities_Echo_FullMethodName                         = "/scanoss.api.vulnerabilities.v2.Vulnerabilities/Echo"
	Vulnerabilities_GetCpes_FullMethodName                      = "/scanoss.api.vulnerabilities.v2.Vulnerabilities/GetCpes"
	Vulnerabilities_GetComponentCpes_FullMethodName             = "/scanoss.api.vulnerabilities.v2.Vulnerabilities/GetComponentCpes"
	Vulnerabilities_GetComponentsCpes_FullMethodName            = "/scanoss.api.vulnerabilities.v2.Vulnerabilities/GetComponentsCpes"
	Vulnerabilities_GetVulnerabilities_FullMethodName           = "/scanoss.api.vulnerabilities.v2.Vulnerabilities/GetVulnerabilities"
	Vulnerabilities_GetComponentVulnerabilities_FullMethodName  = "/scanoss.api.vulnerabilities.v2.Vulnerabilities/GetComponentVulnerabilities"
	Vulnerabilities_GetComponentsVulnerabilities_FullMethodName = "/scanoss.api.vulnerabilities.v2.Vulnerabilities/GetComponentsVulnerabilities"
)

// VulnerabilitiesClient is the client API for Vulnerabilities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Vulnerability Service Definition
type VulnerabilitiesClient interface {
	// Returns the same message that was sent, used for health checks and connectivity testing
	Echo(ctx context.Context, in *commonv2.EchoRequest, opts ...grpc.CallOption) (*commonv2.EchoResponse, error)
	// Get CPEs (Common Platform Enumeration) associated with a PURL - legacy endpoint.
	//
	// Legacy method for retrieving Common Platform Enumeration identifiers
	// associated with software components. Use GetComponentCpes instead.
	GetCpes(ctx context.Context, in *VulnerabilityRequest, opts ...grpc.CallOption) (*CpeResponse, error)
	// Get CPEs (Common Platform Enumeration) associated with a single software component.
	//
	// Returns Common Platform Enumeration identifiers that match the specified component.
	// CPEs are used to identify IT platforms in vulnerability databases and enable
	// vulnerability scanning and assessment.
	//
	// See: https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/vulnerabilities/v2/README.md?tab=readme-ov-file#getcomponentcpes
	GetComponentCpes(ctx context.Context, in *commonv2.ComponentRequest, opts ...grpc.CallOption) (*ComponentCpesResponse, error)
	// Get CPEs (Common Platform Enumeration) associated with multiple software components.
	//
	// Returns Common Platform Enumeration identifiers for multiple components in a single request.
	// CPEs are used to identify IT platforms in vulnerability databases and enable
	// vulnerability scanning and assessment.
	//
	// See: https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/vulnerabilities/v2/README.md?tab=readme-ov-file#getcomponentscpes
	GetComponentsCpes(ctx context.Context, in *commonv2.ComponentsRequest, opts ...grpc.CallOption) (*ComponentsCpesResponse, error)
	// Get vulnerability details - legacy endpoint.
	//
	// Legacy method for retrieving vulnerability information for software components.
	// Use GetComponentVulnerabilities or GetComponentsVulnerabilities instead.
	GetVulnerabilities(ctx context.Context, in *VulnerabilityRequest, opts ...grpc.CallOption) (*VulnerabilityResponse, error)
	// Get vulnerability information for a single software component.
	//
	// Analyzes the component and returns known vulnerabilities including CVE details,
	// severity scores, publication dates, and other security metadata.
	// Vulnerability data is sourced from various security databases and feeds.
	//
	// See: https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/vulnerabilities/v2/README.md?tab=readme-ov-file#getcomponentvulnerabilities
	GetComponentVulnerabilities(ctx context.Context, in *commonv2.ComponentRequest, opts ...grpc.CallOption) (*ComponentVulnerabilityResponse, error)
	// Get vulnerability information for multiple software components in a single request.
	//
	// Analyzes multiple components and returns known vulnerabilities for each including CVE details,
	// severity scores, publication dates, and other security metadata.
	// Vulnerability data is sourced from various security databases and feeds.
	//
	// See: https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/vulnerabilities/v2/README.md?tab=readme-ov-file#getcomponentsvulnerabilities
	GetComponentsVulnerabilities(ctx context.Context, in *commonv2.ComponentsRequest, opts ...grpc.CallOption) (*ComponentsVulnerabilityResponse, error)
}

type vulnerabilitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewVulnerabilitiesClient(cc grpc.ClientConnInterface) VulnerabilitiesClient {
	return &vulnerabilitiesClient{cc}
}

func (c *vulnerabilitiesClient) Echo(ctx context.Context, in *commonv2.EchoRequest, opts ...grpc.CallOption) (*commonv2.EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonv2.EchoResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) GetCpes(ctx context.Context, in *VulnerabilityRequest, opts ...grpc.CallOption) (*CpeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CpeResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_GetCpes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) GetComponentCpes(ctx context.Context, in *commonv2.ComponentRequest, opts ...grpc.CallOption) (*ComponentCpesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentCpesResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_GetComponentCpes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) GetComponentsCpes(ctx context.Context, in *commonv2.ComponentsRequest, opts ...grpc.CallOption) (*ComponentsCpesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentsCpesResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_GetComponentsCpes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) GetVulnerabilities(ctx context.Context, in *VulnerabilityRequest, opts ...grpc.CallOption) (*VulnerabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VulnerabilityResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_GetVulnerabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) GetComponentVulnerabilities(ctx context.Context, in *commonv2.ComponentRequest, opts ...grpc.CallOption) (*ComponentVulnerabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentVulnerabilityResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_GetComponentVulnerabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) GetComponentsVulnerabilities(ctx context.Context, in *commonv2.ComponentsRequest, opts ...grpc.CallOption) (*ComponentsVulnerabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentsVulnerabilityResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_GetComponentsVulnerabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VulnerabilitiesServer is the server API for Vulnerabilities service.
// All implementations must embed UnimplementedVulnerabilitiesServer
// for forward compatibility.
//
// Vulnerability Service Definition
type VulnerabilitiesServer interface {
	// Returns the same message that was sent, used for health checks and connectivity testing
	Echo(context.Context, *commonv2.EchoRequest) (*commonv2.EchoResponse, error)
	// Get CPEs (Common Platform Enumeration) associated with a PURL - legacy endpoint.
	//
	// Legacy method for retrieving Common Platform Enumeration identifiers
	// associated with software components. Use GetComponentCpes instead.
	GetCpes(context.Context, *VulnerabilityRequest) (*CpeResponse, error)
	// Get CPEs (Common Platform Enumeration) associated with a single software component.
	//
	// Returns Common Platform Enumeration identifiers that match the specified component.
	// CPEs are used to identify IT platforms in vulnerability databases and enable
	// vulnerability scanning and assessment.
	//
	// See: https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/vulnerabilities/v2/README.md?tab=readme-ov-file#getcomponentcpes
	GetComponentCpes(context.Context, *commonv2.ComponentRequest) (*ComponentCpesResponse, error)
	// Get CPEs (Common Platform Enumeration) associated with multiple software components.
	//
	// Returns Common Platform Enumeration identifiers for multiple components in a single request.
	// CPEs are used to identify IT platforms in vulnerability databases and enable
	// vulnerability scanning and assessment.
	//
	// See: https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/vulnerabilities/v2/README.md?tab=readme-ov-file#getcomponentscpes
	GetComponentsCpes(context.Context, *commonv2.ComponentsRequest) (*ComponentsCpesResponse, error)
	// Get vulnerability details - legacy endpoint.
	//
	// Legacy method for retrieving vulnerability information for software components.
	// Use GetComponentVulnerabilities or GetComponentsVulnerabilities instead.
	GetVulnerabilities(context.Context, *VulnerabilityRequest) (*VulnerabilityResponse, error)
	// Get vulnerability information for a single software component.
	//
	// Analyzes the component and returns known vulnerabilities including CVE details,
	// severity scores, publication dates, and other security metadata.
	// Vulnerability data is sourced from various security databases and feeds.
	//
	// See: https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/vulnerabilities/v2/README.md?tab=readme-ov-file#getcomponentvulnerabilities
	GetComponentVulnerabilities(context.Context, *commonv2.ComponentRequest) (*ComponentVulnerabilityResponse, error)
	// Get vulnerability information for multiple software components in a single request.
	//
	// Analyzes multiple components and returns known vulnerabilities for each including CVE details,
	// severity scores, publication dates, and other security metadata.
	// Vulnerability data is sourced from various security databases and feeds.
	//
	// See: https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/vulnerabilities/v2/README.md?tab=readme-ov-file#getcomponentsvulnerabilities
	GetComponentsVulnerabilities(context.Context, *commonv2.ComponentsRequest) (*ComponentsVulnerabilityResponse, error)
	mustEmbedUnimplementedVulnerabilitiesServer()
}

// UnimplementedVulnerabilitiesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVulnerabilitiesServer struct{}

func (UnimplementedVulnerabilitiesServer) Echo(context.Context, *commonv2.EchoRequest) (*commonv2.EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedVulnerabilitiesServer) GetCpes(context.Context, *VulnerabilityRequest) (*CpeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCpes not implemented")
}
func (UnimplementedVulnerabilitiesServer) GetComponentCpes(context.Context, *commonv2.ComponentRequest) (*ComponentCpesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentCpes not implemented")
}
func (UnimplementedVulnerabilitiesServer) GetComponentsCpes(context.Context, *commonv2.ComponentsRequest) (*ComponentsCpesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentsCpes not implemented")
}
func (UnimplementedVulnerabilitiesServer) GetVulnerabilities(context.Context, *VulnerabilityRequest) (*VulnerabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilities not implemented")
}
func (UnimplementedVulnerabilitiesServer) GetComponentVulnerabilities(context.Context, *commonv2.ComponentRequest) (*ComponentVulnerabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentVulnerabilities not implemented")
}
func (UnimplementedVulnerabilitiesServer) GetComponentsVulnerabilities(context.Context, *commonv2.ComponentsRequest) (*ComponentsVulnerabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentsVulnerabilities not implemented")
}
func (UnimplementedVulnerabilitiesServer) mustEmbedUnimplementedVulnerabilitiesServer() {}
func (UnimplementedVulnerabilitiesServer) testEmbeddedByValue()                         {}

// UnsafeVulnerabilitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VulnerabilitiesServer will
// result in compilation errors.
type UnsafeVulnerabilitiesServer interface {
	mustEmbedUnimplementedVulnerabilitiesServer()
}

func RegisterVulnerabilitiesServer(s grpc.ServiceRegistrar, srv VulnerabilitiesServer) {
	// If the following call pancis, it indicates UnimplementedVulnerabilitiesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Vulnerabilities_ServiceDesc, srv)
}

func _Vulnerabilities_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonv2.EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).Echo(ctx, req.(*commonv2.EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_GetCpes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VulnerabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).GetCpes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_GetCpes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).GetCpes(ctx, req.(*VulnerabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_GetComponentCpes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonv2.ComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).GetComponentCpes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_GetComponentCpes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).GetComponentCpes(ctx, req.(*commonv2.ComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_GetComponentsCpes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonv2.ComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).GetComponentsCpes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_GetComponentsCpes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).GetComponentsCpes(ctx, req.(*commonv2.ComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_GetVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VulnerabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).GetVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_GetVulnerabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).GetVulnerabilities(ctx, req.(*VulnerabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_GetComponentVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonv2.ComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).GetComponentVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_GetComponentVulnerabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).GetComponentVulnerabilities(ctx, req.(*commonv2.ComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_GetComponentsVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonv2.ComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).GetComponentsVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_GetComponentsVulnerabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).GetComponentsVulnerabilities(ctx, req.(*commonv2.ComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vulnerabilities_ServiceDesc is the grpc.ServiceDesc for Vulnerabilities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vulnerabilities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scanoss.api.vulnerabilities.v2.Vulnerabilities",
	HandlerType: (*VulnerabilitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Vulnerabilities_Echo_Handler,
		},
		{
			MethodName: "GetCpes",
			Handler:    _Vulnerabilities_GetCpes_Handler,
		},
		{
			MethodName: "GetComponentCpes",
			Handler:    _Vulnerabilities_GetComponentCpes_Handler,
		},
		{
			MethodName: "GetComponentsCpes",
			Handler:    _Vulnerabilities_GetComponentsCpes_Handler,
		},
		{
			MethodName: "GetVulnerabilities",
			Handler:    _Vulnerabilities_GetVulnerabilities_Handler,
		},
		{
			MethodName: "GetComponentVulnerabilities",
			Handler:    _Vulnerabilities_GetComponentVulnerabilities_Handler,
		},
		{
			MethodName: "GetComponentsVulnerabilities",
			Handler:    _Vulnerabilities_GetComponentsVulnerabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanoss/api/vulnerabilities/v2/scanoss-vulnerabilities.proto",
}
