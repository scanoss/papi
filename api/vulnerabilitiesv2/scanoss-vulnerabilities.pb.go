//
//SPDX-License-Identifier: MIT
//
//Copyright (c) 2022, SCANOSS
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in
//all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.

//**
// Vulnerability definition details
//*

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: scanoss/api/vulnerabilities/v2/scanoss-vulnerabilities.proto

package vulnerabilitiesv2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	commonv2 "github.com/scanoss/papi/api/commonv2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Legacy request message for vulnerability information.
//
// Contains PURL and version requirement data for vulnerability lookup.
// Use ComponentRequest or ComponentsRequest from common API types instead.
type VulnerabilityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of components to analyze for vulnerabilities
	Purls         []*VulnerabilityRequest_Purls `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VulnerabilityRequest) Reset() {
	*x = VulnerabilityRequest{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityRequest) ProtoMessage() {}

func (x *VulnerabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityRequest.ProtoReflect.Descriptor instead.
func (*VulnerabilityRequest) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{0}
}

func (x *VulnerabilityRequest) GetPurls() []*VulnerabilityRequest_Purls {
	if x != nil {
		return x.Purls
	}
	return nil
}

// Legacy response message for CPE information.
//
// Contains Common Platform Enumeration identifiers associated with components.
// Use ComponentCpesResponse or ComponentsCpesResponse instead.
type CpeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPE details for each requested component
	Purls []*CpeResponse_Purls `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CpeResponse) Reset() {
	*x = CpeResponse{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpeResponse) ProtoMessage() {}

func (x *CpeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpeResponse.ProtoReflect.Descriptor instead.
func (*CpeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{1}
}

func (x *CpeResponse) GetPurls() []*CpeResponse_Purls {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *CpeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Common Platform Enumeration information for a specific component.
//
// Contains CPE identifiers that can be used to match the component
// against vulnerability databases and security advisories.
type ComponentCpesInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component. See Common API Types documentation for format and resolution logic.
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// Specific version of the component that was analyzed
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Echoes the client's version constraint from the request. See Common API Types documentation for resolution logic
	Requirement string `protobuf:"bytes,3,opt,name=requirement,proto3" json:"requirement,omitempty"`
	// List of Common Platform Enumeration identifiers associated with this component
	Cpes          []string `protobuf:"bytes,4,rep,name=cpes,proto3" json:"cpes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentCpesInfo) Reset() {
	*x = ComponentCpesInfo{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentCpesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentCpesInfo) ProtoMessage() {}

func (x *ComponentCpesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentCpesInfo.ProtoReflect.Descriptor instead.
func (*ComponentCpesInfo) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{2}
}

func (x *ComponentCpesInfo) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ComponentCpesInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ComponentCpesInfo) GetRequirement() string {
	if x != nil {
		return x.Requirement
	}
	return ""
}

func (x *ComponentCpesInfo) GetCpes() []string {
	if x != nil {
		return x.Cpes
	}
	return nil
}

// Response message for GetComponentCpes method.
//
// Contains Common Platform Enumeration identifiers for a single software component.
// CPEs enable matching against vulnerability databases and security advisories.
type ComponentCpesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPE information for the component
	Component *ComponentCpesInfo `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentCpesResponse) Reset() {
	*x = ComponentCpesResponse{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentCpesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentCpesResponse) ProtoMessage() {}

func (x *ComponentCpesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentCpesResponse.ProtoReflect.Descriptor instead.
func (*ComponentCpesResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{3}
}

func (x *ComponentCpesResponse) GetComponent() *ComponentCpesInfo {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ComponentCpesResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response message for GetComponentsCpes method.
//
// Contains Common Platform Enumeration identifiers for multiple software components
// processed in a single batch request. Each component is analyzed independently.
type ComponentsCpesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPE information for each component in the batch
	Components []*ComponentCpesInfo `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsCpesResponse) Reset() {
	*x = ComponentsCpesResponse{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsCpesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsCpesResponse) ProtoMessage() {}

func (x *ComponentsCpesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsCpesResponse.ProtoReflect.Descriptor instead.
func (*ComponentsCpesResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{4}
}

func (x *ComponentsCpesResponse) GetComponents() []*ComponentCpesInfo {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ComponentsCpesResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

type Cvss struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CVSS (Common Vulnerability Scoring System) vector string
	Cvss string `protobuf:"bytes,1,opt,name=cvss,proto3" json:"cvss,omitempty"`
	// CVSS numerical score (0.0 to 10.0)
	CvssScore float32 `protobuf:"fixed32,2,opt,name=cvss_score,json=cvssScore,proto3" json:"cvss_score,omitempty"`
	// CVSS severity rating based on score ("None", "Low", "Medium", "High", "Critical")
	CvssSeverity  string `protobuf:"bytes,3,opt,name=cvss_severity,json=cvssSeverity,proto3" json:"cvss_severity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cvss) Reset() {
	*x = Cvss{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cvss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cvss) ProtoMessage() {}

func (x *Cvss) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cvss.ProtoReflect.Descriptor instead.
func (*Cvss) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{5}
}

func (x *Cvss) GetCvss() string {
	if x != nil {
		return x.Cvss
	}
	return ""
}

func (x *Cvss) GetCvssScore() float32 {
	if x != nil {
		return x.CvssScore
	}
	return 0
}

func (x *Cvss) GetCvssSeverity() string {
	if x != nil {
		return x.CvssSeverity
	}
	return ""
}

// Individual vulnerability information with security metadata.
//
// Contains comprehensive vulnerability details including identifiers, severity scores,
// publication dates, and descriptive information from various security databases.
type Vulnerability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Internal vulnerability identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Common Vulnerabilities and Exposures (CVE) identifier
	Cve string `protobuf:"bytes,2,opt,name=cve,proto3" json:"cve,omitempty"`
	// Reference URL to vulnerability details or advisory
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Brief description or summary of the vulnerability
	Summary string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	// General severity level (e.g., "High", "Critical", "Medium", "Low")
	Severity string `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"`
	// ISO 8601 timestamp when the vulnerability was first published
	Published string `protobuf:"bytes,6,opt,name=published,proto3" json:"published,omitempty"`
	// ISO 8601 timestamp when the vulnerability was last modified
	Modified string `protobuf:"bytes,7,opt,name=modified,proto3" json:"modified,omitempty"`
	// Source database or feed that provided this vulnerability information. NDV or OSV
	Source string `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	// CVSS (Common Vulnerability Scoring System)
	Cvss          []*Cvss `protobuf:"bytes,9,rep,name=cvss,proto3" json:"cvss,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vulnerability) Reset() {
	*x = Vulnerability{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability) ProtoMessage() {}

func (x *Vulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability.ProtoReflect.Descriptor instead.
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{6}
}

func (x *Vulnerability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Vulnerability) GetCve() string {
	if x != nil {
		return x.Cve
	}
	return ""
}

func (x *Vulnerability) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Vulnerability) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Vulnerability) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Vulnerability) GetPublished() string {
	if x != nil {
		return x.Published
	}
	return ""
}

func (x *Vulnerability) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *Vulnerability) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Vulnerability) GetCvss() []*Cvss {
	if x != nil {
		return x.Cvss
	}
	return nil
}

// Legacy response message for vulnerability information.
//
// Contains vulnerability data for multiple components. Use ComponentVulnerabilityResponse
// or ComponentsVulnerabilityResponse instead for new implementations.
type VulnerabilityResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Vulnerability details for each requested component
	Purls []*VulnerabilityResponse_Purls `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VulnerabilityResponse) Reset() {
	*x = VulnerabilityResponse{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityResponse) ProtoMessage() {}

func (x *VulnerabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityResponse.ProtoReflect.Descriptor instead.
func (*VulnerabilityResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{7}
}

func (x *VulnerabilityResponse) GetPurls() []*VulnerabilityResponse_Purls {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *VulnerabilityResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Vulnerability information for a specific component identified by PURL and version.
//
// Contains comprehensive vulnerability details including CVE information, severity scores,
// and security metadata for software components.
type ComponentVulnerabilityInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component. See Common API Types documentation for format and resolution logic.
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// Specific version of the component that was analyzed
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Echoes the client's version constraint from the request. See Common API Types documentation for resolution logic
	Requirement string `protobuf:"bytes,3,opt,name=requirement,proto3" json:"requirement,omitempty"`
	// List of known vulnerabilities affecting this component
	Vulnerabilities []*Vulnerability `protobuf:"bytes,4,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ComponentVulnerabilityInfo) Reset() {
	*x = ComponentVulnerabilityInfo{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentVulnerabilityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentVulnerabilityInfo) ProtoMessage() {}

func (x *ComponentVulnerabilityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentVulnerabilityInfo.ProtoReflect.Descriptor instead.
func (*ComponentVulnerabilityInfo) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{8}
}

func (x *ComponentVulnerabilityInfo) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ComponentVulnerabilityInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ComponentVulnerabilityInfo) GetRequirement() string {
	if x != nil {
		return x.Requirement
	}
	return ""
}

func (x *ComponentVulnerabilityInfo) GetVulnerabilities() []*Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

// Response message for GetComponentVulnerabilities method.
//
// Contains vulnerability information for a single software component including
// CVE details, severity scores, and security metadata.
type ComponentVulnerabilityResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Vulnerability information for the component
	Component *ComponentVulnerabilityInfo `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentVulnerabilityResponse) Reset() {
	*x = ComponentVulnerabilityResponse{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentVulnerabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentVulnerabilityResponse) ProtoMessage() {}

func (x *ComponentVulnerabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentVulnerabilityResponse.ProtoReflect.Descriptor instead.
func (*ComponentVulnerabilityResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{9}
}

func (x *ComponentVulnerabilityResponse) GetComponent() *ComponentVulnerabilityInfo {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ComponentVulnerabilityResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response message for GetComponentsVulnerabilities method.
//
// Contains vulnerability information for multiple software components processed
// in a single batch request. Each component is analyzed independently.
type ComponentsVulnerabilityResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Vulnerability information for each component in the batch
	Components []*ComponentVulnerabilityInfo `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsVulnerabilityResponse) Reset() {
	*x = ComponentsVulnerabilityResponse{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsVulnerabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsVulnerabilityResponse) ProtoMessage() {}

func (x *ComponentsVulnerabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsVulnerabilityResponse.ProtoReflect.Descriptor instead.
func (*ComponentsVulnerabilityResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{10}
}

func (x *ComponentsVulnerabilityResponse) GetComponents() []*ComponentVulnerabilityInfo {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ComponentsVulnerabilityResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Component identification for vulnerability lookup.
type VulnerabilityRequest_Purls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// Version constraint or requirement specification
	Requirement   string `protobuf:"bytes,2,opt,name=requirement,proto3" json:"requirement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VulnerabilityRequest_Purls) Reset() {
	*x = VulnerabilityRequest_Purls{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilityRequest_Purls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityRequest_Purls) ProtoMessage() {}

func (x *VulnerabilityRequest_Purls) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityRequest_Purls.ProtoReflect.Descriptor instead.
func (*VulnerabilityRequest_Purls) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VulnerabilityRequest_Purls) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *VulnerabilityRequest_Purls) GetRequirement() string {
	if x != nil {
		return x.Requirement
	}
	return ""
}

// CPE information for a specific component.
type CpeResponse_Purls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of Common Platform Enumeration identifiers associated with this component
	Cpes          []string `protobuf:"bytes,2,rep,name=cpes,proto3" json:"cpes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CpeResponse_Purls) Reset() {
	*x = CpeResponse_Purls{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpeResponse_Purls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpeResponse_Purls) ProtoMessage() {}

func (x *CpeResponse_Purls) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpeResponse_Purls.ProtoReflect.Descriptor instead.
func (*CpeResponse_Purls) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CpeResponse_Purls) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *CpeResponse_Purls) GetCpes() []string {
	if x != nil {
		return x.Cpes
	}
	return nil
}

// Vulnerability information for a specific component.
type VulnerabilityResponse_Purls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of known vulnerabilities affecting this component
	Vulnerabilities []*Vulnerability `protobuf:"bytes,2,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VulnerabilityResponse_Purls) Reset() {
	*x = VulnerabilityResponse_Purls{}
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilityResponse_Purls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityResponse_Purls) ProtoMessage() {}

func (x *VulnerabilityResponse_Purls) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityResponse_Purls.ProtoReflect.Descriptor instead.
func (*VulnerabilityResponse_Purls) Descriptor() ([]byte, []int) {
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP(), []int{7, 0}
}

func (x *VulnerabilityResponse_Purls) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *VulnerabilityResponse_Purls) GetVulnerabilities() []*Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

var File_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto protoreflect.FileDescriptor

const file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDesc = "" +
	"\n" +
	"<scanoss/api/vulnerabilities/v2/scanoss-vulnerabilities.proto\x12\x1escanoss.api.vulnerabilities.v2\x1a*scanoss/api/common/v2/scanoss-common.proto\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\xa7\x01\n" +
	"\x14VulnerabilityRequest\x12P\n" +
	"\x05purls\x18\x01 \x03(\v2:.scanoss.api.vulnerabilities.v2.VulnerabilityRequest.PurlsR\x05purls\x1a=\n" +
	"\x05Purls\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12 \n" +
	"\vrequirement\x18\x02 \x01(\tR\vrequirement\"\xc6\x01\n" +
	"\vCpeResponse\x12G\n" +
	"\x05purls\x18\x01 \x03(\v21.scanoss.api.vulnerabilities.v2.CpeResponse.PurlsR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1a/\n" +
	"\x05Purls\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x12\n" +
	"\x04cpes\x18\x02 \x03(\tR\x04cpes\"w\n" +
	"\x11ComponentCpesInfo\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12 \n" +
	"\vrequirement\x18\x03 \x01(\tR\vrequirement\x12\x12\n" +
	"\x04cpes\x18\x04 \x03(\tR\x04cpes\"\x9e\x03\n" +
	"\x15ComponentCpesResponse\x12O\n" +
	"\tcomponent\x18\x01 \x01(\v21.scanoss.api.vulnerabilities.v2.ComponentCpesInfoR\tcomponent\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status:\xf4\x01\x92A\xf0\x01\n" +
	"\xed\x01J\xea\x01{\"component\":{\"purl\": \"pkg:github/scanoss/engine@1.0.0\", \"requirement\": \"1.0.0\", \"version\": \"1.0.0\", \"cpes\": [\"cpe:2.3:a:scanoss:engine:1.0.0:*:*:*:*:*:*:*\"]}, \"status\": {\"status\": \"SUCCESS\", \"message\": \"CPEs Successfully retrieved\"}}\"\xbb\x04\n" +
	"\x16ComponentsCpesResponse\x12Q\n" +
	"\n" +
	"components\x18\x01 \x03(\v21.scanoss.api.vulnerabilities.v2.ComponentCpesInfoR\n" +
	"components\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status:\x8e\x03\x92A\x8a\x03\n" +
	"\x87\x03J\x84\x03{\"components\":[{\"purl\": \"pkg:github/scanoss/engine\", \"requirement=\": \"1.0.0\", \"version=\": \"1.0.0\", \"cpes\": [\"cpe:2.3:a:scanoss:engine:1.0.0:*:*:*:*:*:*:*\"]}, {\"purl\": \"pkg:github/scanoss/scanoss.py@v1.30.0\",\"requirement\": \"\",\"version\": \"v1.30.0\", \"cpes\": [\"cpe:2.3:a:scanoss:scanoss.py:1.30.0:*:*:*:*:*:*:*\"]}  ], \"status\": {\"status\": \"SUCCESS\", \"message\": \"CPEs Successfully retrieved\"}}\"^\n" +
	"\x04Cvss\x12\x12\n" +
	"\x04cvss\x18\x01 \x01(\tR\x04cvss\x12\x1d\n" +
	"\n" +
	"cvss_score\x18\x02 \x01(\x02R\tcvssScore\x12#\n" +
	"\rcvss_severity\x18\x03 \x01(\tR\fcvssSeverity\"\x85\x02\n" +
	"\rVulnerability\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03cve\x18\x02 \x01(\tR\x03cve\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x18\n" +
	"\asummary\x18\x04 \x01(\tR\asummary\x12\x1a\n" +
	"\bseverity\x18\x05 \x01(\tR\bseverity\x12\x1c\n" +
	"\tpublished\x18\x06 \x01(\tR\tpublished\x12\x1a\n" +
	"\bmodified\x18\a \x01(\tR\bmodified\x12\x16\n" +
	"\x06source\x18\b \x01(\tR\x06source\x128\n" +
	"\x04cvss\x18\t \x03(\v2$.scanoss.api.vulnerabilities.v2.CvssR\x04cvss\"\x9f\x02\n" +
	"\x15VulnerabilityResponse\x12Q\n" +
	"\x05purls\x18\x01 \x03(\v2;.scanoss.api.vulnerabilities.v2.VulnerabilityResponse.PurlsR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1at\n" +
	"\x05Purls\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12W\n" +
	"\x0fvulnerabilities\x18\x02 \x03(\v2-.scanoss.api.vulnerabilities.v2.VulnerabilityR\x0fvulnerabilities\"\xc5\x01\n" +
	"\x1aComponentVulnerabilityInfo\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12 \n" +
	"\vrequirement\x18\x03 \x01(\tR\vrequirement\x12W\n" +
	"\x0fvulnerabilities\x18\x04 \x03(\v2-.scanoss.api.vulnerabilities.v2.VulnerabilityR\x0fvulnerabilities\"\xea\x05\n" +
	"\x1eComponentVulnerabilityResponse\x12X\n" +
	"\tcomponent\x18\x01 \x01(\v2:.scanoss.api.vulnerabilities.v2.ComponentVulnerabilityInfoR\tcomponent\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status:\xae\x04\x92A\xaa\x04\n" +
	"\xa7\x04J\xa4\x04{\"component\":{\"purl\": \"pkg:github/scanoss/engine\", \"requirement\": \"=>1.0.0\", \"version\": \"1.0.0\", \"vulnerabilities\": [{\"id\": \"DLA-2640-1\", \"cve\": \"DLA-2640-1\", \"url\": \"https://osv.dev/vulnerability/DLA-2640-1\", \"summary\": \"gst-plugins-good1.0 - security update\", \"severity\": \"Critical\", \"published\": \"2021-04-26\", \"modified\": \"2025-05-26\", \"source\": \"OSV\", \"cvss\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\", \"cvss_score\": 9.8, \"cvss_severity\": \"Critical\"}]}, \"status\": {\"status\": \"SUCCESS\", \"message\": \"Vulnerabilities Successfully retrieved\"}}\"\xb9\t\n" +
	"\x1fComponentsVulnerabilityResponse\x12Z\n" +
	"\n" +
	"components\x18\x01 \x03(\v2:.scanoss.api.vulnerabilities.v2.ComponentVulnerabilityInfoR\n" +
	"components\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status:\xfa\a\x92A\xf6\a\n" +
	"\xf3\aJ\xf0\a{\"components\":[{\"purl\": \"pkg:github/scanoss/engine\", \"requirement\": \"1.0.0\", \"version\": \"1.0.0\", \"vulnerabilities\": [{\"id\": \"DLA-2640-1\", \"cve\": \"DLA-2640-1\", \"url\": \"https://osv.dev/vulnerability/DLA-2640-1\", \"summary\": \"gst-plugins-good1.0 - security update\", \"severity\": \"Critical\", \"published\": \"2021-04-26\", \"modified\": \"2025-05-26\", \"source\": \"OSV\", \"cvss\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\", \"cvss_score\": 9.8, \"cvss_severity\": \"Critical\"}]}, {\"purl\": \"pkg:github/scanoss/scanoss.py\",\"requirement\": \"v1.30.0\",\"version\": \"v1.30.0\", \"vulnerabilities\": [{\"id\": \"CVE-2024-54321\", \"cve\": \"CVE-2024-54321\", \"url\": \"https://nvd.nist.gov/vuln/detail/CVE-2024-54321\", \"summary\": \"Denial of service vulnerability\", \"severity\": \"Medium\", \"published\": \"2024-01-15\", \"modified\": \"2024-02-01\", \"source\": \"NDV\", \"cvss\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L\", \"cvss_score\": 4.3, \"cvss_severity\": \"Medium\"}]}], \"status\": {\"status\": \"SUCCESS\", \"message\": \"Vulnerabilities Successfully retrieved\"}}2\xbd\b\n" +
	"\x0fVulnerabilities\x12x\n" +
	"\x04Echo\x12\".scanoss.api.common.v2.EchoRequest\x1a#.scanoss.api.common.v2.EchoResponse\"'\x82\xd3\xe4\x93\x02!:\x01*\"\x1c/api/v2/vulnerabilities/echo\x12l\n" +
	"\aGetCpes\x124.scanoss.api.vulnerabilities.v2.VulnerabilityRequest\x1a+.scanoss.api.vulnerabilities.v2.CpeResponse\x12\xa2\x01\n" +
	"\x10GetComponentCpes\x12'.scanoss.api.common.v2.ComponentRequest\x1a5.scanoss.api.vulnerabilities.v2.ComponentCpesResponse\".\x82\xd3\xe4\x93\x02(\x12&/api/v2/vulnerabilities/cpes/component\x12\xa9\x01\n" +
	"\x11GetComponentsCpes\x12(.scanoss.api.common.v2.ComponentsRequest\x1a6.scanoss.api.vulnerabilities.v2.ComponentsCpesResponse\"2\x82\xd3\xe4\x93\x02,:\x01*\"'/api/v2/vulnerabilities/cpes/components\x12\x81\x01\n" +
	"\x12GetVulnerabilities\x124.scanoss.api.vulnerabilities.v2.VulnerabilityRequest\x1a5.scanoss.api.vulnerabilities.v2.VulnerabilityResponse\x12\xb1\x01\n" +
	"\x1bGetComponentVulnerabilities\x12'.scanoss.api.common.v2.ComponentRequest\x1a>.scanoss.api.vulnerabilities.v2.ComponentVulnerabilityResponse\")\x82\xd3\xe4\x93\x02#\x12!/api/v2/vulnerabilities/component\x12\xb8\x01\n" +
	"\x1cGetComponentsVulnerabilities\x12(.scanoss.api.common.v2.ComponentsRequest\x1a?.scanoss.api.vulnerabilities.v2.ComponentsVulnerabilityResponse\"-\x82\xd3\xe4\x93\x02':\x01*\"\"/api/v2/vulnerabilities/componentsB\x92\x03\x92A\xcd\x02\x12\xd4\x01\n" +
	"\x1dSCANOSS Vulnerability Service\x12RVulnerability service provides vulnerability intelligence for software components.\"Z\n" +
	"\x17scanoss-vulnerabilities\x12*https://github.com/scanoss/vulnerabilities\x1a\x13support@scanoss.com2\x032.0\x1a\x0fapi.scanoss.com*\x02\x01\x022\x10application/json:\x10application/jsonR;\n" +
	"\x03404\x124\n" +
	"*Returned when the resource does not exist.\x12\x06\n" +
	"\x04\x9a\x02\x01\aZ?github.com/scanoss/papi/api/vulnerabilitiesv2;vulnerabilitiesv2b\x06proto3"

var (
	file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescOnce sync.Once
	file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescData []byte
)

func file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescGZIP() []byte {
	file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescOnce.Do(func() {
		file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDesc), len(file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDesc)))
	})
	return file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDescData
}

var file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_goTypes = []any{
	(*VulnerabilityRequest)(nil),            // 0: scanoss.api.vulnerabilities.v2.VulnerabilityRequest
	(*CpeResponse)(nil),                     // 1: scanoss.api.vulnerabilities.v2.CpeResponse
	(*ComponentCpesInfo)(nil),               // 2: scanoss.api.vulnerabilities.v2.ComponentCpesInfo
	(*ComponentCpesResponse)(nil),           // 3: scanoss.api.vulnerabilities.v2.ComponentCpesResponse
	(*ComponentsCpesResponse)(nil),          // 4: scanoss.api.vulnerabilities.v2.ComponentsCpesResponse
	(*Cvss)(nil),                            // 5: scanoss.api.vulnerabilities.v2.Cvss
	(*Vulnerability)(nil),                   // 6: scanoss.api.vulnerabilities.v2.Vulnerability
	(*VulnerabilityResponse)(nil),           // 7: scanoss.api.vulnerabilities.v2.VulnerabilityResponse
	(*ComponentVulnerabilityInfo)(nil),      // 8: scanoss.api.vulnerabilities.v2.ComponentVulnerabilityInfo
	(*ComponentVulnerabilityResponse)(nil),  // 9: scanoss.api.vulnerabilities.v2.ComponentVulnerabilityResponse
	(*ComponentsVulnerabilityResponse)(nil), // 10: scanoss.api.vulnerabilities.v2.ComponentsVulnerabilityResponse
	(*VulnerabilityRequest_Purls)(nil),      // 11: scanoss.api.vulnerabilities.v2.VulnerabilityRequest.Purls
	(*CpeResponse_Purls)(nil),               // 12: scanoss.api.vulnerabilities.v2.CpeResponse.Purls
	(*VulnerabilityResponse_Purls)(nil),     // 13: scanoss.api.vulnerabilities.v2.VulnerabilityResponse.Purls
	(*commonv2.StatusResponse)(nil),         // 14: scanoss.api.common.v2.StatusResponse
	(*commonv2.EchoRequest)(nil),            // 15: scanoss.api.common.v2.EchoRequest
	(*commonv2.ComponentRequest)(nil),       // 16: scanoss.api.common.v2.ComponentRequest
	(*commonv2.ComponentsRequest)(nil),      // 17: scanoss.api.common.v2.ComponentsRequest
	(*commonv2.EchoResponse)(nil),           // 18: scanoss.api.common.v2.EchoResponse
}
var file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_depIdxs = []int32{
	11, // 0: scanoss.api.vulnerabilities.v2.VulnerabilityRequest.purls:type_name -> scanoss.api.vulnerabilities.v2.VulnerabilityRequest.Purls
	12, // 1: scanoss.api.vulnerabilities.v2.CpeResponse.purls:type_name -> scanoss.api.vulnerabilities.v2.CpeResponse.Purls
	14, // 2: scanoss.api.vulnerabilities.v2.CpeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	2,  // 3: scanoss.api.vulnerabilities.v2.ComponentCpesResponse.component:type_name -> scanoss.api.vulnerabilities.v2.ComponentCpesInfo
	14, // 4: scanoss.api.vulnerabilities.v2.ComponentCpesResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	2,  // 5: scanoss.api.vulnerabilities.v2.ComponentsCpesResponse.components:type_name -> scanoss.api.vulnerabilities.v2.ComponentCpesInfo
	14, // 6: scanoss.api.vulnerabilities.v2.ComponentsCpesResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	5,  // 7: scanoss.api.vulnerabilities.v2.Vulnerability.cvss:type_name -> scanoss.api.vulnerabilities.v2.Cvss
	13, // 8: scanoss.api.vulnerabilities.v2.VulnerabilityResponse.purls:type_name -> scanoss.api.vulnerabilities.v2.VulnerabilityResponse.Purls
	14, // 9: scanoss.api.vulnerabilities.v2.VulnerabilityResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	6,  // 10: scanoss.api.vulnerabilities.v2.ComponentVulnerabilityInfo.vulnerabilities:type_name -> scanoss.api.vulnerabilities.v2.Vulnerability
	8,  // 11: scanoss.api.vulnerabilities.v2.ComponentVulnerabilityResponse.component:type_name -> scanoss.api.vulnerabilities.v2.ComponentVulnerabilityInfo
	14, // 12: scanoss.api.vulnerabilities.v2.ComponentVulnerabilityResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	8,  // 13: scanoss.api.vulnerabilities.v2.ComponentsVulnerabilityResponse.components:type_name -> scanoss.api.vulnerabilities.v2.ComponentVulnerabilityInfo
	14, // 14: scanoss.api.vulnerabilities.v2.ComponentsVulnerabilityResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	6,  // 15: scanoss.api.vulnerabilities.v2.VulnerabilityResponse.Purls.vulnerabilities:type_name -> scanoss.api.vulnerabilities.v2.Vulnerability
	15, // 16: scanoss.api.vulnerabilities.v2.Vulnerabilities.Echo:input_type -> scanoss.api.common.v2.EchoRequest
	0,  // 17: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetCpes:input_type -> scanoss.api.vulnerabilities.v2.VulnerabilityRequest
	16, // 18: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetComponentCpes:input_type -> scanoss.api.common.v2.ComponentRequest
	17, // 19: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetComponentsCpes:input_type -> scanoss.api.common.v2.ComponentsRequest
	0,  // 20: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetVulnerabilities:input_type -> scanoss.api.vulnerabilities.v2.VulnerabilityRequest
	16, // 21: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetComponentVulnerabilities:input_type -> scanoss.api.common.v2.ComponentRequest
	17, // 22: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetComponentsVulnerabilities:input_type -> scanoss.api.common.v2.ComponentsRequest
	18, // 23: scanoss.api.vulnerabilities.v2.Vulnerabilities.Echo:output_type -> scanoss.api.common.v2.EchoResponse
	1,  // 24: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetCpes:output_type -> scanoss.api.vulnerabilities.v2.CpeResponse
	3,  // 25: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetComponentCpes:output_type -> scanoss.api.vulnerabilities.v2.ComponentCpesResponse
	4,  // 26: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetComponentsCpes:output_type -> scanoss.api.vulnerabilities.v2.ComponentsCpesResponse
	7,  // 27: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetVulnerabilities:output_type -> scanoss.api.vulnerabilities.v2.VulnerabilityResponse
	9,  // 28: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetComponentVulnerabilities:output_type -> scanoss.api.vulnerabilities.v2.ComponentVulnerabilityResponse
	10, // 29: scanoss.api.vulnerabilities.v2.Vulnerabilities.GetComponentsVulnerabilities:output_type -> scanoss.api.vulnerabilities.v2.ComponentsVulnerabilityResponse
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_init() }
func file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_init() {
	if File_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDesc), len(file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_goTypes,
		DependencyIndexes: file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_depIdxs,
		MessageInfos:      file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_msgTypes,
	}.Build()
	File_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto = out.File
	file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_goTypes = nil
	file_scanoss_api_vulnerabilities_v2_scanoss_vulnerabilities_proto_depIdxs = nil
}
