//
//SPDX-License-Identifier: MIT
//
//Copyright (c) 2023, SCANOSS
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in
//all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.

//*
// Semgrep definition details

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: scanoss/api/semgrep/v2/scanoss-semgrep.proto

package semgrepv2

import (
	context "context"
	commonv2 "github.com/scanoss/papi/api/commonv2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Semgrep_Echo_FullMethodName                = "/scanoss.api.semgrep.v2.Semgrep/Echo"
	Semgrep_GetIssues_FullMethodName           = "/scanoss.api.semgrep.v2.Semgrep/GetIssues"
	Semgrep_GetComponentsIssues_FullMethodName = "/scanoss.api.semgrep.v2.Semgrep/GetComponentsIssues"
	Semgrep_GetComponentIssues_FullMethodName  = "/scanoss.api.semgrep.v2.Semgrep/GetComponentIssues"
)

// SemgrepClient is the client API for Semgrep service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Expose all of the SCANOSS Semgrep Security Analysis RPCs here
type SemgrepClient interface {
	// Standard health check endpoint to verify service availability and connectivity
	Echo(ctx context.Context, in *commonv2.EchoRequest, opts ...grpc.CallOption) (*commonv2.EchoResponse, error)
	// Deprecated: Do not use.
	// [DEPRECATED] Get potential security issues associated with a list of PURLs
	// This method accepts PURL-based requests and is deprecated in favor of GetComponentsIssues
	// which accepts ComponentsRequest for better component identification
	GetIssues(ctx context.Context, in *commonv2.PurlRequest, opts ...grpc.CallOption) (*SemgrepResponse, error)
	// Get potential security issues associated with multiple components
	// This is the current method that accepts ComponentsRequest for enhanced component identification
	// Replaces the deprecated GetIssues method
	GetComponentsIssues(ctx context.Context, in *commonv2.ComponentsRequest, opts ...grpc.CallOption) (*ComponentsIssueResponse, error)
	// Get potential security issues associated with a single component
	// This is the current method that accepts ComponentRequest for enhanced component identification
	// Replaces the deprecated GetIssues method for single component queries
	GetComponentIssues(ctx context.Context, in *commonv2.ComponentRequest, opts ...grpc.CallOption) (*ComponentIssueResponse, error)
}

type semgrepClient struct {
	cc grpc.ClientConnInterface
}

func NewSemgrepClient(cc grpc.ClientConnInterface) SemgrepClient {
	return &semgrepClient{cc}
}

func (c *semgrepClient) Echo(ctx context.Context, in *commonv2.EchoRequest, opts ...grpc.CallOption) (*commonv2.EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonv2.EchoResponse)
	err := c.cc.Invoke(ctx, Semgrep_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *semgrepClient) GetIssues(ctx context.Context, in *commonv2.PurlRequest, opts ...grpc.CallOption) (*SemgrepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SemgrepResponse)
	err := c.cc.Invoke(ctx, Semgrep_GetIssues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semgrepClient) GetComponentsIssues(ctx context.Context, in *commonv2.ComponentsRequest, opts ...grpc.CallOption) (*ComponentsIssueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentsIssueResponse)
	err := c.cc.Invoke(ctx, Semgrep_GetComponentsIssues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semgrepClient) GetComponentIssues(ctx context.Context, in *commonv2.ComponentRequest, opts ...grpc.CallOption) (*ComponentIssueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentIssueResponse)
	err := c.cc.Invoke(ctx, Semgrep_GetComponentIssues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SemgrepServer is the server API for Semgrep service.
// All implementations must embed UnimplementedSemgrepServer
// for forward compatibility.
//
// *
// Expose all of the SCANOSS Semgrep Security Analysis RPCs here
type SemgrepServer interface {
	// Standard health check endpoint to verify service availability and connectivity
	Echo(context.Context, *commonv2.EchoRequest) (*commonv2.EchoResponse, error)
	// Deprecated: Do not use.
	// [DEPRECATED] Get potential security issues associated with a list of PURLs
	// This method accepts PURL-based requests and is deprecated in favor of GetComponentsIssues
	// which accepts ComponentsRequest for better component identification
	GetIssues(context.Context, *commonv2.PurlRequest) (*SemgrepResponse, error)
	// Get potential security issues associated with multiple components
	// This is the current method that accepts ComponentsRequest for enhanced component identification
	// Replaces the deprecated GetIssues method
	GetComponentsIssues(context.Context, *commonv2.ComponentsRequest) (*ComponentsIssueResponse, error)
	// Get potential security issues associated with a single component
	// This is the current method that accepts ComponentRequest for enhanced component identification
	// Replaces the deprecated GetIssues method for single component queries
	GetComponentIssues(context.Context, *commonv2.ComponentRequest) (*ComponentIssueResponse, error)
	mustEmbedUnimplementedSemgrepServer()
}

// UnimplementedSemgrepServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSemgrepServer struct{}

func (UnimplementedSemgrepServer) Echo(context.Context, *commonv2.EchoRequest) (*commonv2.EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedSemgrepServer) GetIssues(context.Context, *commonv2.PurlRequest) (*SemgrepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssues not implemented")
}
func (UnimplementedSemgrepServer) GetComponentsIssues(context.Context, *commonv2.ComponentsRequest) (*ComponentsIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentsIssues not implemented")
}
func (UnimplementedSemgrepServer) GetComponentIssues(context.Context, *commonv2.ComponentRequest) (*ComponentIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentIssues not implemented")
}
func (UnimplementedSemgrepServer) mustEmbedUnimplementedSemgrepServer() {}
func (UnimplementedSemgrepServer) testEmbeddedByValue()                 {}

// UnsafeSemgrepServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SemgrepServer will
// result in compilation errors.
type UnsafeSemgrepServer interface {
	mustEmbedUnimplementedSemgrepServer()
}

func RegisterSemgrepServer(s grpc.ServiceRegistrar, srv SemgrepServer) {
	// If the following call pancis, it indicates UnimplementedSemgrepServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Semgrep_ServiceDesc, srv)
}

func _Semgrep_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonv2.EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemgrepServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Semgrep_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemgrepServer).Echo(ctx, req.(*commonv2.EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Semgrep_GetIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonv2.PurlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemgrepServer).GetIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Semgrep_GetIssues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemgrepServer).GetIssues(ctx, req.(*commonv2.PurlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Semgrep_GetComponentsIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonv2.ComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemgrepServer).GetComponentsIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Semgrep_GetComponentsIssues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemgrepServer).GetComponentsIssues(ctx, req.(*commonv2.ComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Semgrep_GetComponentIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonv2.ComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemgrepServer).GetComponentIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Semgrep_GetComponentIssues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemgrepServer).GetComponentIssues(ctx, req.(*commonv2.ComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Semgrep_ServiceDesc is the grpc.ServiceDesc for Semgrep service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Semgrep_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scanoss.api.semgrep.v2.Semgrep",
	HandlerType: (*SemgrepServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Semgrep_Echo_Handler,
		},
		{
			MethodName: "GetIssues",
			Handler:    _Semgrep_GetIssues_Handler,
		},
		{
			MethodName: "GetComponentsIssues",
			Handler:    _Semgrep_GetComponentsIssues_Handler,
		},
		{
			MethodName: "GetComponentIssues",
			Handler:    _Semgrep_GetComponentIssues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanoss/api/semgrep/v2/scanoss-semgrep.proto",
}
