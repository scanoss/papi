//
//SPDX-License-Identifier: MIT
//
//Copyright (c) 2023, SCANOSS
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in
//all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.

//**
// Cryptography definition details
//
// Provides cryptographic intelligence for software components including algorithm detection,
// encryption hints, and cryptographic assessment across version ranges.
//*

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: scanoss/api/cryptography/v2/scanoss-cryptography.proto

package cryptographyv2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	commonv2 "github.com/scanoss/papi/api/commonv2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cryptographic algorithm information.
//
// Contains details about cryptographic algorithms detected in software components
// including algorithm identification and strength assessment.
type Algorithm struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the detected cryptographic algorithm (e.g., "AES", "RSA", "SHA-256")
	Algorithm string `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// Algorithm strength classification (e.g., "Strong", "Weak", "Broken")
	Strength      string `protobuf:"bytes,2,opt,name=strength,proto3" json:"strength,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Algorithm) Reset() {
	*x = Algorithm{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm) ProtoMessage() {}

func (x *Algorithm) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm.ProtoReflect.Descriptor instead.
func (*Algorithm) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{0}
}

func (x *Algorithm) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Algorithm) GetStrength() string {
	if x != nil {
		return x.Strength
	}
	return ""
}

// Legacy response message for cryptographic algorithm information.
//
// Contains algorithm data for multiple components. Use ComponentAlgorithmResponse
// or ComponentsAlgorithmsResponse instead for new implementations.
//
// Deprecated: Marked as deprecated in scanoss/api/cryptography/v2/scanoss-cryptography.proto.
type AlgorithmResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Algorithm details for each requested component
	Purls []*AlgorithmResponse_Purls `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmResponse) Reset() {
	*x = AlgorithmResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmResponse) ProtoMessage() {}

func (x *AlgorithmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmResponse.ProtoReflect.Descriptor instead.
func (*AlgorithmResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{1}
}

func (x *AlgorithmResponse) GetPurls() []*AlgorithmResponse_Purls {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *AlgorithmResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Cryptographic algorithm information for a specific component identified by PURL and version.
//
// Contains comprehensive algorithm details including detected algorithms and their
// strength classifications for software components.
type ComponentAlgorithms struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component. See Common API Types documentation for format and resolution logic.
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// Specific version of the component that was analyzed
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Echoes the client's version constraint from the request. See Common API Types documentation for resolution logic
	Requirement string `protobuf:"bytes,3,opt,name=requirement,proto3" json:"requirement,omitempty"`
	// List of cryptographic algorithms detected in this component version
	Algorithms    []*Algorithm `protobuf:"bytes,4,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentAlgorithms) Reset() {
	*x = ComponentAlgorithms{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentAlgorithms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentAlgorithms) ProtoMessage() {}

func (x *ComponentAlgorithms) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentAlgorithms.ProtoReflect.Descriptor instead.
func (*ComponentAlgorithms) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{2}
}

func (x *ComponentAlgorithms) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ComponentAlgorithms) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ComponentAlgorithms) GetRequirement() string {
	if x != nil {
		return x.Requirement
	}
	return ""
}

func (x *ComponentAlgorithms) GetAlgorithms() []*Algorithm {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

// Response message for GetComponentsAlgorithms method.
//
// Contains cryptographic algorithm information for multiple software components
// processed in a single batch request. Each component is analyzed independently.
type ComponentsAlgorithmsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Algorithm information for each component in the batch
	Components []*ComponentAlgorithms `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsAlgorithmsResponse) Reset() {
	*x = ComponentsAlgorithmsResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsAlgorithmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsAlgorithmsResponse) ProtoMessage() {}

func (x *ComponentsAlgorithmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsAlgorithmsResponse.ProtoReflect.Descriptor instead.
func (*ComponentsAlgorithmsResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{3}
}

func (x *ComponentsAlgorithmsResponse) GetComponents() []*ComponentAlgorithms {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ComponentsAlgorithmsResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response message for GetComponentAlgorithms method.
//
// Contains cryptographic algorithm information for a single software component including
// algorithm names, strength classifications, and analysis metadata.
type ComponentAlgorithmsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Algorithm information for the component
	Component *ComponentAlgorithms `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentAlgorithmsResponse) Reset() {
	*x = ComponentAlgorithmsResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentAlgorithmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentAlgorithmsResponse) ProtoMessage() {}

func (x *ComponentAlgorithmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentAlgorithmsResponse.ProtoReflect.Descriptor instead.
func (*ComponentAlgorithmsResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{4}
}

func (x *ComponentAlgorithmsResponse) GetComponent() *ComponentAlgorithms {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ComponentAlgorithmsResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Cryptographic Algorithm response data for a given range or criteria
//
// Deprecated: Marked as deprecated in scanoss/api/cryptography/v2/scanoss-cryptography.proto.
type AlgorithmsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cryptography details
	Purls []*AlgorithmsInRangeResponse_Purl `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmsInRangeResponse) Reset() {
	*x = AlgorithmsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmsInRangeResponse) ProtoMessage() {}

func (x *AlgorithmsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmsInRangeResponse.ProtoReflect.Descriptor instead.
func (*AlgorithmsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{5}
}

func (x *AlgorithmsInRangeResponse) GetPurls() []*AlgorithmsInRangeResponse_Purl {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *AlgorithmsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response message for GetComponentsAlgorithmsInRange method.
//
// Contains cryptographic algorithm information for multiple components across version ranges
// processed in a single batch request. Each component is analyzed independently.
type ComponentsAlgorithmsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Algorithm details for each component in the batch
	Components []*ComponentsAlgorithmsInRangeResponse_Component `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsAlgorithmsInRangeResponse) Reset() {
	*x = ComponentsAlgorithmsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsAlgorithmsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsAlgorithmsInRangeResponse) ProtoMessage() {}

func (x *ComponentsAlgorithmsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsAlgorithmsInRangeResponse.ProtoReflect.Descriptor instead.
func (*ComponentsAlgorithmsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{6}
}

func (x *ComponentsAlgorithmsInRangeResponse) GetComponents() []*ComponentsAlgorithmsInRangeResponse_Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ComponentsAlgorithmsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response message for GetComponentAlgorithmsInRange method.
//
// Contains cryptographic algorithm information for a single component across version ranges
// including all detected algorithms and the versions where they appear.
type ComponentAlgorithmsInRangeResponse struct {
	state     protoimpl.MessageState                        `protogen:"open.v1"`
	Component *ComponentAlgorithmsInRangeResponse_Component `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentAlgorithmsInRangeResponse) Reset() {
	*x = ComponentAlgorithmsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentAlgorithmsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentAlgorithmsInRangeResponse) ProtoMessage() {}

func (x *ComponentAlgorithmsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentAlgorithmsInRangeResponse.ProtoReflect.Descriptor instead.
func (*ComponentAlgorithmsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{7}
}

func (x *ComponentAlgorithmsInRangeResponse) GetComponent() *ComponentAlgorithmsInRangeResponse_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ComponentAlgorithmsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

//	Versions with/without cryptographic algorithms detected for the given range or criteria
//
// Deprecated: Marked as deprecated in scanoss/api/cryptography/v2/scanoss-cryptography.proto.
type VersionsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cryptography details
	Purls []*VersionsInRangeResponse_Purl `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionsInRangeResponse) Reset() {
	*x = VersionsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionsInRangeResponse) ProtoMessage() {}

func (x *VersionsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionsInRangeResponse.ProtoReflect.Descriptor instead.
func (*VersionsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{8}
}

func (x *VersionsInRangeResponse) GetPurls() []*VersionsInRangeResponse_Purl {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *VersionsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response message for ComponentsVersionsInRange method.
//
// Contains version lists for multiple components categorized by cryptographic algorithm presence,
// processed in a single batch request. Each component is analyzed independently.
type ComponentsVersionsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version details for each component in the batch
	Components []*ComponentsVersionsInRangeResponse_Component `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsVersionsInRangeResponse) Reset() {
	*x = ComponentsVersionsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsVersionsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsVersionsInRangeResponse) ProtoMessage() {}

func (x *ComponentsVersionsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsVersionsInRangeResponse.ProtoReflect.Descriptor instead.
func (*ComponentsVersionsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{9}
}

func (x *ComponentsVersionsInRangeResponse) GetComponents() []*ComponentsVersionsInRangeResponse_Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ComponentsVersionsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response message for ComponentVersionsInRange method.
//
// Contains version lists for a single component categorized by cryptographic algorithm presence,
// helping assess cryptographic adoption across component evolution.
type ComponentVersionsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version details for each component in the batch
	Component *ComponentVersionsInRangeResponse_Component `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentVersionsInRangeResponse) Reset() {
	*x = ComponentVersionsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentVersionsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentVersionsInRangeResponse) ProtoMessage() {}

func (x *ComponentVersionsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentVersionsInRangeResponse.ProtoReflect.Descriptor instead.
func (*ComponentVersionsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{10}
}

func (x *ComponentVersionsInRangeResponse) GetComponent() *ComponentVersionsInRangeResponse_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ComponentVersionsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Cryptographic hint information.
//
// Contains details about cryptographic protocols, libraries, SDKs and frameworks
// detected in software components, providing insights into cryptographic usage patterns.
type Hint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the cryptographic hint
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the cryptographic protocol, library, SDK or framework
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Brief description of the detected cryptographic usage or implementation
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Category classification: "protocol", "library", "sdk", or "framework"
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Reference URL to project homepage, repository, or documentation
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// Package URL (PURL) of the original cryptographic library, SDK or framework
	Purl          string `protobuf:"bytes,6,opt,name=purl,proto3" json:"purl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hint) Reset() {
	*x = Hint{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hint) ProtoMessage() {}

func (x *Hint) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hint.ProtoReflect.Descriptor instead.
func (*Hint) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{11}
}

func (x *Hint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Hint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Hint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Hint) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Hint) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Hint) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

// Cryptographic hint information for a specific component identified by PURL and version.
//
// Contains comprehensive cryptographic hints about protocols, libraries, SDKs and frameworks
// used by the component, providing insights into cryptographic dependencies and usage patterns.
type ComponentHints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component. See Common API Types documentation for format and resolution logic.
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// Specific version of the component that was analyzed
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Echoes the client's version constraint from the request. See Common API Types documentation for resolution logic
	Requirement string `protobuf:"bytes,3,opt,name=requirement,proto3" json:"requirement,omitempty"`
	// List of cryptographic hints detected in this component version
	Hints         []*Hint `protobuf:"bytes,4,rep,name=hints,proto3" json:"hints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentHints) Reset() {
	*x = ComponentHints{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentHints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentHints) ProtoMessage() {}

func (x *ComponentHints) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentHints.ProtoReflect.Descriptor instead.
func (*ComponentHints) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{12}
}

func (x *ComponentHints) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ComponentHints) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ComponentHints) GetRequirement() string {
	if x != nil {
		return x.Requirement
	}
	return ""
}

func (x *ComponentHints) GetHints() []*Hint {
	if x != nil {
		return x.Hints
	}
	return nil
}

// Encryption Hints response data
type HintsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Purl encryption Hint
	Purls []*HintsResponse_Purls `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HintsResponse) Reset() {
	*x = HintsResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintsResponse) ProtoMessage() {}

func (x *HintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintsResponse.ProtoReflect.Descriptor instead.
func (*HintsResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{13}
}

func (x *HintsResponse) GetPurls() []*HintsResponse_Purls {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *HintsResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// *
// Hints of Encryption protocols, libraries, SDKs and frameworks for a purls in range
type HintsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Purl encryption hints
	Purls []*HintsInRangeResponse_Purl `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HintsInRangeResponse) Reset() {
	*x = HintsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HintsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintsInRangeResponse) ProtoMessage() {}

func (x *HintsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintsInRangeResponse.ProtoReflect.Descriptor instead.
func (*HintsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{14}
}

func (x *HintsInRangeResponse) GetPurls() []*HintsInRangeResponse_Purl {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *HintsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// *
// Hints of Encryption protocols, libraries, SDKs and frameworks for a purls in range
type ComponentsHintsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Purl encryption hints
	Components []*ComponentsHintsInRangeResponse_Component `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsHintsInRangeResponse) Reset() {
	*x = ComponentsHintsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsHintsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsHintsInRangeResponse) ProtoMessage() {}

func (x *ComponentsHintsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsHintsInRangeResponse.ProtoReflect.Descriptor instead.
func (*ComponentsHintsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{15}
}

func (x *ComponentsHintsInRangeResponse) GetComponents() []*ComponentsHintsInRangeResponse_Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ComponentsHintsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// *
// Hints of Encryption protocols, libraries, SDKs and frameworks for a purls in range
type ComponentHintsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Purl encryption hints
	Component *ComponentHintsInRangeResponse_Component `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentHintsInRangeResponse) Reset() {
	*x = ComponentHintsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentHintsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentHintsInRangeResponse) ProtoMessage() {}

func (x *ComponentHintsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentHintsInRangeResponse.ProtoReflect.Descriptor instead.
func (*ComponentHintsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{16}
}

func (x *ComponentHintsInRangeResponse) GetComponent() *ComponentHintsInRangeResponse_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ComponentHintsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response message for ComponentsHintsInRange method.
//
// Contains cryptographic hint information for multiple software components
// processed in a single batch request. Each component is analyzed independently.
type ComponentsEncryptionHintsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cryptographic hint information for each component in the batch
	Components []*ComponentHints `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsEncryptionHintsResponse) Reset() {
	*x = ComponentsEncryptionHintsResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsEncryptionHintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsEncryptionHintsResponse) ProtoMessage() {}

func (x *ComponentsEncryptionHintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsEncryptionHintsResponse.ProtoReflect.Descriptor instead.
func (*ComponentsEncryptionHintsResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{17}
}

func (x *ComponentsEncryptionHintsResponse) GetComponents() []*ComponentHints {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ComponentsEncryptionHintsResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response message for ComponentHintsInRange method.
//
// Contains cryptographic hint information for a single software component including
// details about protocols, libraries, SDKs and frameworks used.
type ComponentEncryptionHintsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cryptographic hint information for the component
	Component *ComponentHints `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Response status indicating success or failure
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentEncryptionHintsResponse) Reset() {
	*x = ComponentEncryptionHintsResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentEncryptionHintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentEncryptionHintsResponse) ProtoMessage() {}

func (x *ComponentEncryptionHintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentEncryptionHintsResponse.ProtoReflect.Descriptor instead.
func (*ComponentEncryptionHintsResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{18}
}

func (x *ComponentEncryptionHintsResponse) GetComponent() *ComponentHints {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ComponentEncryptionHintsResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Algorithm information for a specific component.
type AlgorithmResponse_Purls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// Specific version of the component that was analyzed
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// List of cryptographic algorithms detected in this component version
	Algorithms    []*Algorithm `protobuf:"bytes,3,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmResponse_Purls) Reset() {
	*x = AlgorithmResponse_Purls{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmResponse_Purls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmResponse_Purls) ProtoMessage() {}

func (x *AlgorithmResponse_Purls) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmResponse_Purls.ProtoReflect.Descriptor instead.
func (*AlgorithmResponse_Purls) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AlgorithmResponse_Purls) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *AlgorithmResponse_Purls) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AlgorithmResponse_Purls) GetAlgorithms() []*Algorithm {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

// Information for a given PURL
type AlgorithmsInRangeResponse_Purl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions in that range that contains cryptography
	Versions []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	// Algorithms list detected in that range
	Algorithms    []*Algorithm `protobuf:"bytes,3,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmsInRangeResponse_Purl) Reset() {
	*x = AlgorithmsInRangeResponse_Purl{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmsInRangeResponse_Purl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmsInRangeResponse_Purl) ProtoMessage() {}

func (x *AlgorithmsInRangeResponse_Purl) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmsInRangeResponse_Purl.ProtoReflect.Descriptor instead.
func (*AlgorithmsInRangeResponse_Purl) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{5, 0}
}

func (x *AlgorithmsInRangeResponse_Purl) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *AlgorithmsInRangeResponse_Purl) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *AlgorithmsInRangeResponse_Purl) GetAlgorithms() []*Algorithm {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

// Algorithm information for a specific component across version ranges.
type ComponentsAlgorithmsInRangeResponse_Component struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions in the specified range that contain cryptographic algorithms
	Versions []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	// List of cryptographic algorithms detected across the version range
	Algorithms    []*Algorithm `protobuf:"bytes,3,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsAlgorithmsInRangeResponse_Component) Reset() {
	*x = ComponentsAlgorithmsInRangeResponse_Component{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsAlgorithmsInRangeResponse_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsAlgorithmsInRangeResponse_Component) ProtoMessage() {}

func (x *ComponentsAlgorithmsInRangeResponse_Component) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsAlgorithmsInRangeResponse_Component.ProtoReflect.Descriptor instead.
func (*ComponentsAlgorithmsInRangeResponse_Component) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ComponentsAlgorithmsInRangeResponse_Component) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ComponentsAlgorithmsInRangeResponse_Component) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ComponentsAlgorithmsInRangeResponse_Component) GetAlgorithms() []*Algorithm {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

// Algorithm information for a specific component across version ranges.
type ComponentAlgorithmsInRangeResponse_Component struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions in the specified range that contain cryptographic algorithms
	Versions []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	// List of cryptographic algorithms detected across the version range
	Algorithms    []*Algorithm `protobuf:"bytes,3,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentAlgorithmsInRangeResponse_Component) Reset() {
	*x = ComponentAlgorithmsInRangeResponse_Component{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentAlgorithmsInRangeResponse_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentAlgorithmsInRangeResponse_Component) ProtoMessage() {}

func (x *ComponentAlgorithmsInRangeResponse_Component) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentAlgorithmsInRangeResponse_Component.ProtoReflect.Descriptor instead.
func (*ComponentAlgorithmsInRangeResponse_Component) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ComponentAlgorithmsInRangeResponse_Component) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ComponentAlgorithmsInRangeResponse_Component) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ComponentAlgorithmsInRangeResponse_Component) GetAlgorithms() []*Algorithm {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

// Information for a given PURL
type VersionsInRangeResponse_Purl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions that contains cryptography
	VersionsWith []string `protobuf:"bytes,2,rep,name=versions_with,proto3" json:"versions_with,omitempty"`
	// List of versions that do not contain cryptography
	VersionsWithout []string `protobuf:"bytes,3,rep,name=versions_without,proto3" json:"versions_without,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VersionsInRangeResponse_Purl) Reset() {
	*x = VersionsInRangeResponse_Purl{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionsInRangeResponse_Purl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionsInRangeResponse_Purl) ProtoMessage() {}

func (x *VersionsInRangeResponse_Purl) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionsInRangeResponse_Purl.ProtoReflect.Descriptor instead.
func (*VersionsInRangeResponse_Purl) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{8, 0}
}

func (x *VersionsInRangeResponse_Purl) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *VersionsInRangeResponse_Purl) GetVersionsWith() []string {
	if x != nil {
		return x.VersionsWith
	}
	return nil
}

func (x *VersionsInRangeResponse_Purl) GetVersionsWithout() []string {
	if x != nil {
		return x.VersionsWithout
	}
	return nil
}

// Version information for a specific component categorized by cryptographic presence.
type ComponentsVersionsInRangeResponse_Component struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions in the specified range that contain cryptographic algorithms
	VersionsWith []string `protobuf:"bytes,2,rep,name=versions_with,proto3" json:"versions_with,omitempty"`
	// List of versions in the specified range that do not contain cryptographic algorithms
	VersionsWithout []string `protobuf:"bytes,3,rep,name=versions_without,proto3" json:"versions_without,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ComponentsVersionsInRangeResponse_Component) Reset() {
	*x = ComponentsVersionsInRangeResponse_Component{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsVersionsInRangeResponse_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsVersionsInRangeResponse_Component) ProtoMessage() {}

func (x *ComponentsVersionsInRangeResponse_Component) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsVersionsInRangeResponse_Component.ProtoReflect.Descriptor instead.
func (*ComponentsVersionsInRangeResponse_Component) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ComponentsVersionsInRangeResponse_Component) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ComponentsVersionsInRangeResponse_Component) GetVersionsWith() []string {
	if x != nil {
		return x.VersionsWith
	}
	return nil
}

func (x *ComponentsVersionsInRangeResponse_Component) GetVersionsWithout() []string {
	if x != nil {
		return x.VersionsWithout
	}
	return nil
}

// Version information for a specific component categorized by cryptographic presence.
type ComponentVersionsInRangeResponse_Component struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Package URL (PURL) uniquely identifying the component
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions in the specified range that contain cryptographic algorithms
	VersionsWith []string `protobuf:"bytes,2,rep,name=versions_with,proto3" json:"versions_with,omitempty"`
	// List of versions in the specified range that do not contain cryptographic algorithms
	VersionsWithout []string `protobuf:"bytes,3,rep,name=versions_without,proto3" json:"versions_without,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ComponentVersionsInRangeResponse_Component) Reset() {
	*x = ComponentVersionsInRangeResponse_Component{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentVersionsInRangeResponse_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentVersionsInRangeResponse_Component) ProtoMessage() {}

func (x *ComponentVersionsInRangeResponse_Component) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentVersionsInRangeResponse_Component.ProtoReflect.Descriptor instead.
func (*ComponentVersionsInRangeResponse_Component) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ComponentVersionsInRangeResponse_Component) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ComponentVersionsInRangeResponse_Component) GetVersionsWith() []string {
	if x != nil {
		return x.VersionsWith
	}
	return nil
}

func (x *ComponentVersionsInRangeResponse_Component) GetVersionsWithout() []string {
	if x != nil {
		return x.VersionsWithout
	}
	return nil
}

// Information for a given purl
type HintsResponse_Purls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl.
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// PURL version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Algorithms list detected for that version
	Hints         []*Hint `protobuf:"bytes,3,rep,name=hints,proto3" json:"hints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HintsResponse_Purls) Reset() {
	*x = HintsResponse_Purls{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HintsResponse_Purls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintsResponse_Purls) ProtoMessage() {}

func (x *HintsResponse_Purls) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintsResponse_Purls.ProtoReflect.Descriptor instead.
func (*HintsResponse_Purls) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{13, 0}
}

func (x *HintsResponse_Purls) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *HintsResponse_Purls) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HintsResponse_Purls) GetHints() []*Hint {
	if x != nil {
		return x.Hints
	}
	return nil
}

// Information about the requested purl
type HintsInRangeResponse_Purl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions in range
	Versions []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	// Encryption hints
	Hints         []*Hint `protobuf:"bytes,3,rep,name=hints,proto3" json:"hints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HintsInRangeResponse_Purl) Reset() {
	*x = HintsInRangeResponse_Purl{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HintsInRangeResponse_Purl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintsInRangeResponse_Purl) ProtoMessage() {}

func (x *HintsInRangeResponse_Purl) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintsInRangeResponse_Purl.ProtoReflect.Descriptor instead.
func (*HintsInRangeResponse_Purl) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{14, 0}
}

func (x *HintsInRangeResponse_Purl) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *HintsInRangeResponse_Purl) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *HintsInRangeResponse_Purl) GetHints() []*Hint {
	if x != nil {
		return x.Hints
	}
	return nil
}

// Information about the requested purl
type ComponentsHintsInRangeResponse_Component struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions in range
	Versions []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	// Encryption hints
	Hints         []*Hint `protobuf:"bytes,3,rep,name=hints,proto3" json:"hints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentsHintsInRangeResponse_Component) Reset() {
	*x = ComponentsHintsInRangeResponse_Component{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentsHintsInRangeResponse_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsHintsInRangeResponse_Component) ProtoMessage() {}

func (x *ComponentsHintsInRangeResponse_Component) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsHintsInRangeResponse_Component.ProtoReflect.Descriptor instead.
func (*ComponentsHintsInRangeResponse_Component) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ComponentsHintsInRangeResponse_Component) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ComponentsHintsInRangeResponse_Component) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ComponentsHintsInRangeResponse_Component) GetHints() []*Hint {
	if x != nil {
		return x.Hints
	}
	return nil
}

// Information about the requested purl
type ComponentHintsInRangeResponse_Component struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions in range
	Versions []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	// Encryption hints
	Hints         []*Hint `protobuf:"bytes,3,rep,name=hints,proto3" json:"hints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentHintsInRangeResponse_Component) Reset() {
	*x = ComponentHintsInRangeResponse_Component{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentHintsInRangeResponse_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentHintsInRangeResponse_Component) ProtoMessage() {}

func (x *ComponentHintsInRangeResponse_Component) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentHintsInRangeResponse_Component.ProtoReflect.Descriptor instead.
func (*ComponentHintsInRangeResponse_Component) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ComponentHintsInRangeResponse_Component) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ComponentHintsInRangeResponse_Component) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ComponentHintsInRangeResponse_Component) GetHints() []*Hint {
	if x != nil {
		return x.Hints
	}
	return nil
}

var File_scanoss_api_cryptography_v2_scanoss_cryptography_proto protoreflect.FileDescriptor

const file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDesc = "" +
	"\n" +
	"6scanoss/api/cryptography/v2/scanoss-cryptography.proto\x12\x1bscanoss.api.cryptography.v2\x1a*scanoss/api/common/v2/scanoss-common.proto\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"E\n" +
	"\tAlgorithm\x12\x1c\n" +
	"\talgorithm\x18\x01 \x01(\tR\talgorithm\x12\x1a\n" +
	"\bstrength\x18\x02 \x01(\tR\bstrength\"\xa1\x02\n" +
	"\x11AlgorithmResponse\x12J\n" +
	"\x05purls\x18\x01 \x03(\v24.scanoss.api.cryptography.v2.AlgorithmResponse.PurlsR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1a}\n" +
	"\x05Purls\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12F\n" +
	"\n" +
	"algorithms\x18\x03 \x03(\v2&.scanoss.api.cryptography.v2.AlgorithmR\n" +
	"algorithms:\x02\x18\x01\"\xad\x01\n" +
	"\x13ComponentAlgorithms\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12 \n" +
	"\vrequirement\x18\x03 \x01(\tR\vrequirement\x12F\n" +
	"\n" +
	"algorithms\x18\x04 \x03(\v2&.scanoss.api.cryptography.v2.AlgorithmR\n" +
	"algorithms\"\xf4\x04\n" +
	"\x1cComponentsAlgorithmsResponse\x12P\n" +
	"\n" +
	"components\x18\x01 \x03(\v20.scanoss.api.cryptography.v2.ComponentAlgorithmsR\n" +
	"components\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status:\xc2\x03\x92A\xbe\x03\n" +
	"\xbb\x03J\xb8\x03{\"components\":[{\"purl\": \"pkg:github/scanoss/engine\", \"requirement\": \">=5.0.0\", \"version\": \"5.0.0\", \"algorithms\": [{\"algorithm\": \"AES\", \"strength\": \"Strong\"}, {\"algorithm\": \"RSA\", \"strength\": \"Strong\"}]}, {\"purl\": \"pkg:github/scanoss/scanoss.py\", \"requirement\": \"~1.30.0\", \"version\": \"v1.30.0\", \"algorithms\": [{\"algorithm\": \"SHA-256\", \"strength\": \"Strong\"}]}], \"status\": {\"status\": \"SUCCESS\", \"message\": \"Algorithms Successfully retrieved\"}}\"\xd3\x03\n" +
	"\x1bComponentAlgorithmsResponse\x12N\n" +
	"\tcomponent\x18\x01 \x01(\v20.scanoss.api.cryptography.v2.ComponentAlgorithmsR\tcomponent\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status:\xa4\x02\x92A\xa0\x02\n" +
	"\x9d\x02J\x9a\x02{\"component\":{\"purl\": \"pkg:github/scanoss/engine\", \"requirement\": \">=5.0.0\", \"version\": \"5.0.0\", \"algorithms\": [{\"algorithm\": \"AES\", \"strength\": \"Strong\"}, {\"algorithm\": \"RSA\", \"strength\": \"Strong\"}]}, \"status\": {\"status\": \"SUCCESS\", \"message\": \"Algorithms Successfully retrieved\"}}\"\xb1\x02\n" +
	"\x19AlgorithmsInRangeResponse\x12Q\n" +
	"\x05purls\x18\x01 \x03(\v2;.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.PurlR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1a~\n" +
	"\x04Purl\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x1a\n" +
	"\bversions\x18\x02 \x03(\tR\bversions\x12F\n" +
	"\n" +
	"algorithms\x18\x03 \x03(\v2&.scanoss.api.cryptography.v2.AlgorithmR\n" +
	"algorithms:\x02\x18\x01\"\xd3\x05\n" +
	"#ComponentsAlgorithmsInRangeResponse\x12j\n" +
	"\n" +
	"components\x18\x01 \x03(\v2J.scanoss.api.cryptography.v2.ComponentsAlgorithmsInRangeResponse.ComponentR\n" +
	"components\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1a\x83\x01\n" +
	"\tComponent\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x1a\n" +
	"\bversions\x18\x02 \x03(\tR\bversions\x12F\n" +
	"\n" +
	"algorithms\x18\x03 \x03(\v2&.scanoss.api.cryptography.v2.AlgorithmR\n" +
	"algorithms:\xfa\x02\x92A\xf6\x02\n" +
	"\xf3\x02J\xf0\x02{\"components\":[{\"purl\": \"pkg:github/scanoss/engine\", \"versions\": [\"1.0.0\", \"2.0.0\"], \"algorithms\": [{\"algorithm\": \"AES\", \"strength\": \"Strong\"}]}, {\"purl\": \"pkg:github/scanoss/scanoss.py\", \"versions\": [\"v1.30.0\"], \"algorithms\": [{\"algorithm\": \"SHA-256\", \"strength\": \"Strong\"}]}], \"status\": {\"status\": \"SUCCESS\", \"message\": \"Algorithms in range Successfully retrieved\"}}\"\xfe\x04\n" +
	"\"ComponentAlgorithmsInRangeResponse\x12g\n" +
	"\tcomponent\x18\x01 \x01(\v2I.scanoss.api.cryptography.v2.ComponentAlgorithmsInRangeResponse.ComponentR\tcomponent\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1a\x83\x01\n" +
	"\tComponent\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x1a\n" +
	"\bversions\x18\x02 \x03(\tR\bversions\x12F\n" +
	"\n" +
	"algorithms\x18\x03 \x03(\v2&.scanoss.api.cryptography.v2.AlgorithmR\n" +
	"algorithms:\xa9\x02\x92A\xa5\x02\n" +
	"\xa2\x02J\x9f\x02{\"component\": {\"purl\": \"pkg:github/scanoss/engine\", \"versions\": [\"1.0.0\", \"2.0.0\", \"3.0.0\"], \"algorithms\": [{\"algorithm\": \"AES\", \"strength\": \"Strong\"}, {\"algorithm\": \"RSA\", \"strength\": \"Strong\"}]}, \"status\": {\"status\": \"SUCCESS\", \"message\": \"Algorithms in range Successfully retrieved\"}}\"\x9b\x02\n" +
	"\x17VersionsInRangeResponse\x12O\n" +
	"\x05purls\x18\x01 \x03(\v29.scanoss.api.cryptography.v2.VersionsInRangeResponse.PurlR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1al\n" +
	"\x04Purl\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12$\n" +
	"\rversions_with\x18\x02 \x03(\tR\rversions_with\x12*\n" +
	"\x10versions_without\x18\x03 \x03(\tR\x10versions_without:\x02\x18\x01\"\x85\x05\n" +
	"!ComponentsVersionsInRangeResponse\x12h\n" +
	"\n" +
	"components\x18\x01 \x03(\v2H.scanoss.api.cryptography.v2.ComponentsVersionsInRangeResponse.ComponentR\n" +
	"components\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1aq\n" +
	"\tComponent\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12$\n" +
	"\rversions_with\x18\x02 \x03(\tR\rversions_with\x12*\n" +
	"\x10versions_without\x18\x03 \x03(\tR\x10versions_without:\xc3\x02\x92A\xbf\x02\n" +
	"\xbc\x02J\xb9\x02{\"components\":[{\"purl\": \"pkg:github/scanoss/engine\", \"versions_with\": [\"2.0.0\", \"3.0.0\"], \"versions_without\": [\"1.0.0\"]}, {\"purl\": \"pkg:github/scanoss/scanoss.py\", \"versions_with\": [\"v1.30.0\"], \"versions_without\": [\"v1.29.0\"]}], \"status\": {\"status\": \"SUCCESS\", \"message\": \"Version ranges Successfully retrieved\"}}\"\xa7\x04\n" +
	" ComponentVersionsInRangeResponse\x12e\n" +
	"\tcomponent\x18\x01 \x01(\v2G.scanoss.api.cryptography.v2.ComponentVersionsInRangeResponse.ComponentR\tcomponent\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1aq\n" +
	"\tComponent\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12$\n" +
	"\rversions_with\x18\x02 \x03(\tR\rversions_with\x12*\n" +
	"\x10versions_without\x18\x03 \x03(\tR\x10versions_without:\xe9\x01\x92A\xe5\x01\n" +
	"\xe2\x01J\xdf\x01{\"component\": {\"purl\": \"pkg:github/scanoss/engine\", \"versions_with\": [\"2.0.0\", \"3.0.0\", \"4.0.0\"], \"versions_without\": [\"1.0.0\", \"1.5.0\"]}, \"status\": {\"status\": \"SUCCESS\", \"message\": \"Version ranges Successfully retrieved\"}}\"\x8e\x01\n" +
	"\x04Hint\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\bcategory\x18\x04 \x01(\tR\bcategory\x12\x10\n" +
	"\x03url\x18\x05 \x01(\tR\x03url\x12\x12\n" +
	"\x04purl\x18\x06 \x01(\tR\x04purl\"\x99\x01\n" +
	"\x0eComponentHints\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12 \n" +
	"\vrequirement\x18\x03 \x01(\tR\vrequirement\x127\n" +
	"\x05hints\x18\x04 \x03(\v2!.scanoss.api.cryptography.v2.HintR\x05hints\"\x86\x02\n" +
	"\rHintsResponse\x12F\n" +
	"\x05purls\x18\x01 \x03(\v20.scanoss.api.cryptography.v2.HintsResponse.PurlsR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1an\n" +
	"\x05Purls\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x127\n" +
	"\x05hints\x18\x03 \x03(\v2!.scanoss.api.cryptography.v2.HintR\x05hints\"\x94\x02\n" +
	"\x14HintsInRangeResponse\x12L\n" +
	"\x05purls\x18\x01 \x03(\v26.scanoss.api.cryptography.v2.HintsInRangeResponse.PurlR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1ao\n" +
	"\x04Purl\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x1a\n" +
	"\bversions\x18\x02 \x03(\tR\bversions\x127\n" +
	"\x05hints\x18\x03 \x03(\v2!.scanoss.api.cryptography.v2.HintR\x05hints\"\xbc\x02\n" +
	"\x1eComponentsHintsInRangeResponse\x12e\n" +
	"\n" +
	"components\x18\x01 \x03(\v2E.scanoss.api.cryptography.v2.ComponentsHintsInRangeResponse.ComponentR\n" +
	"components\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1at\n" +
	"\tComponent\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x1a\n" +
	"\bversions\x18\x02 \x03(\tR\bversions\x127\n" +
	"\x05hints\x18\x03 \x03(\v2!.scanoss.api.cryptography.v2.HintR\x05hints\"\xb8\x02\n" +
	"\x1dComponentHintsInRangeResponse\x12b\n" +
	"\tcomponent\x18\x01 \x01(\v2D.scanoss.api.cryptography.v2.ComponentHintsInRangeResponse.ComponentR\tcomponent\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1at\n" +
	"\tComponent\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x1a\n" +
	"\bversions\x18\x02 \x03(\tR\bversions\x127\n" +
	"\x05hints\x18\x03 \x03(\v2!.scanoss.api.cryptography.v2.HintR\x05hints\"\xe8\x06\n" +
	"!ComponentsEncryptionHintsResponse\x12K\n" +
	"\n" +
	"components\x18\x01 \x03(\v2+.scanoss.api.cryptography.v2.ComponentHintsR\n" +
	"components\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status:\xb6\x05\x92A\xb2\x05\n" +
	"\xaf\x05J\xac\x05{\"components\":[{\"purl\": \"pkg:github/scanoss/engine\", \"requirement\": \">=5.0.0\", \"version\": \"5.0.0\", \"hints\": [{\"id\": \"openssl-hint-001\", \"name\": \"OpenSSL\", \"description\": \"Industry standard cryptographic library\", \"category\": \"library\", \"url\": \"https://www.openssl.org/\", \"purl\": \"pkg:generic/openssl@3.0.0\"}]}, {\"purl\": \"pkg:github/scanoss/scanoss.py\", \"requirement\": \"~1.30.0\", \"version\": \"v1.30.0\", \"hints\": [{\"id\": \"tls-protocol-001\", \"name\": \"TLS 1.3\", \"description\": \"Transport Layer Security protocol\", \"category\": \"protocol\", \"url\": \"https://tools.ietf.org/html/rfc8446\", \"purl\": \"\"}]}], \"status\": {\"status\": \"SUCCESS\", \"message\": \"Cryptographic hints Successfully retrieved\"}}\"\xc7\x04\n" +
	" ComponentEncryptionHintsResponse\x12I\n" +
	"\tcomponent\x18\x01 \x01(\v2+.scanoss.api.cryptography.v2.ComponentHintsR\tcomponent\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status:\x98\x03\x92A\x94\x03\n" +
	"\x91\x03J\x8e\x03{\"component\":{\"purl\": \"pkg:github/scanoss/engine\", \"requirement\": \">=5.0.0\", \"version\": \"5.0.0\", \"hints\": [{\"id\": \"openssl-hint-001\", \"name\": \"OpenSSL\", \"description\": \"Industry standard cryptographic library\", \"category\": \"library\", \"url\": \"https://www.openssl.org/\", \"purl\": \"pkg:generic/openssl@3.0.0\"}]}, \"status\": {\"status\": \"SUCCESS\", \"message\": \"Cryptographic hints Successfully retrieved\"}}2\x86\x14\n" +
	"\fCryptography\x12q\n" +
	"\x04Echo\x12\".scanoss.api.common.v2.EchoRequest\x1a#.scanoss.api.common.v2.EchoResponse\" \x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/v2/cryptography/echo\x12h\n" +
	"\rGetAlgorithms\x12\".scanoss.api.common.v2.PurlRequest\x1a..scanoss.api.cryptography.v2.AlgorithmResponse\"\x03\x88\x02\x01\x12\xaa\x01\n" +
	"\x16GetComponentAlgorithms\x12'.scanoss.api.common.v2.ComponentRequest\x1a8.scanoss.api.cryptography.v2.ComponentAlgorithmsResponse\"-\x82\xd3\xe4\x93\x02'\x12%/v2/cryptography/algorithms/component\x12\xb1\x01\n" +
	"\x17GetComponentsAlgorithms\x12(.scanoss.api.common.v2.ComponentsRequest\x1a9.scanoss.api.cryptography.v2.ComponentsAlgorithmsResponse\"1\x82\xd3\xe4\x93\x02+:\x01*\"&/v2/cryptography/algorithms/components\x12w\n" +
	"\x14GetAlgorithmsInRange\x12\".scanoss.api.common.v2.PurlRequest\x1a6.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse\"\x03\x88\x02\x01\x12\xbe\x01\n" +
	"\x1dGetComponentAlgorithmsInRange\x12'.scanoss.api.common.v2.ComponentRequest\x1a?.scanoss.api.cryptography.v2.ComponentAlgorithmsInRangeResponse\"3\x82\xd3\xe4\x93\x02-\x12+/v2/cryptography/algorithms/range/component\x12\xc5\x01\n" +
	"\x1eGetComponentsAlgorithmsInRange\x12(.scanoss.api.common.v2.ComponentsRequest\x1a@.scanoss.api.cryptography.v2.ComponentsAlgorithmsInRangeResponse\"7\x82\xd3\xe4\x93\x021:\x01*\",/v2/cryptography/algorithms/range/components\x12s\n" +
	"\x12GetVersionsInRange\x12\".scanoss.api.common.v2.PurlRequest\x1a4.scanoss.api.cryptography.v2.VersionsInRangeResponse\"\x03\x88\x02\x01\x12\xc3\x01\n" +
	"\x1bGetComponentVersionsInRange\x12'.scanoss.api.common.v2.ComponentRequest\x1a=.scanoss.api.cryptography.v2.ComponentVersionsInRangeResponse\"<\x82\xd3\xe4\x93\x026\x124/v2/cryptography/algorithms/versions/range/component\x12\xca\x01\n" +
	"\x1cGetComponentsVersionsInRange\x12(.scanoss.api.common.v2.ComponentsRequest\x1a>.scanoss.api.cryptography.v2.ComponentsVersionsInRangeResponse\"@\x82\xd3\xe4\x93\x02::\x01*\"5/v2/cryptography/algorithms/versions/range/components\x12m\n" +
	"\x0fGetHintsInRange\x12\".scanoss.api.common.v2.PurlRequest\x1a1.scanoss.api.cryptography.v2.HintsInRangeResponse\"\x03\x88\x02\x01\x12\xaf\x01\n" +
	"\x18GetComponentHintsInRange\x12'.scanoss.api.common.v2.ComponentRequest\x1a:.scanoss.api.cryptography.v2.ComponentHintsInRangeResponse\".\x82\xd3\xe4\x93\x02(\x12&/v2/cryptography/hints/range/component\x12\xb6\x01\n" +
	"\x19GetComponentsHintsInRange\x12(.scanoss.api.common.v2.ComponentsRequest\x1a;.scanoss.api.cryptography.v2.ComponentsHintsInRangeResponse\"2\x82\xd3\xe4\x93\x02,:\x01*\"'/v2/cryptography/hints/range/components\x12i\n" +
	"\x12GetEncryptionHints\x12\".scanoss.api.common.v2.PurlRequest\x1a*.scanoss.api.cryptography.v2.HintsResponse\"\x03\x88\x02\x01\x12\xaf\x01\n" +
	"\x1bGetComponentEncryptionHints\x12'.scanoss.api.common.v2.ComponentRequest\x1a=.scanoss.api.cryptography.v2.ComponentEncryptionHintsResponse\"(\x82\xd3\xe4\x93\x02\"\x12 /v2/cryptography/hints/component\x12\xb6\x01\n" +
	"\x1cGetComponentsEncryptionHints\x12(.scanoss.api.common.v2.ComponentsRequest\x1a>.scanoss.api.cryptography.v2.ComponentsEncryptionHintsResponse\",\x82\xd3\xe4\x93\x02&:\x01*\"!/v2/cryptography/hints/componentsB\xbb\x03\x92A\xfc\x02\x12\x83\x02\n" +
	"\x1cSCANOSS Cryptography Service\x12\x87\x01Cryptography service provides cryptographic intelligence for software components including algorithm detection and encryption analysis.\"T\n" +
	"\x14scanoss-cryptography\x12'https://github.com/scanoss/cryptography\x1a\x13support@scanoss.com2\x032.0\x1a\x0fapi.scanoss.com*\x02\x01\x022\x10application/json:\x10application/jsonR;\n" +
	"\x03404\x124\n" +
	"*Returned when the resource does not exist.\x12\x06\n" +
	"\x04\x9a\x02\x01\aZ9github.com/scanoss/papi/api/cryptographyv2;cryptographyv2b\x06proto3"

var (
	file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescOnce sync.Once
	file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescData []byte
)

func file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP() []byte {
	file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescOnce.Do(func() {
		file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDesc), len(file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDesc)))
	})
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescData
}

var file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_goTypes = []any{
	(*Algorithm)(nil),                                     // 0: scanoss.api.cryptography.v2.Algorithm
	(*AlgorithmResponse)(nil),                             // 1: scanoss.api.cryptography.v2.AlgorithmResponse
	(*ComponentAlgorithms)(nil),                           // 2: scanoss.api.cryptography.v2.ComponentAlgorithms
	(*ComponentsAlgorithmsResponse)(nil),                  // 3: scanoss.api.cryptography.v2.ComponentsAlgorithmsResponse
	(*ComponentAlgorithmsResponse)(nil),                   // 4: scanoss.api.cryptography.v2.ComponentAlgorithmsResponse
	(*AlgorithmsInRangeResponse)(nil),                     // 5: scanoss.api.cryptography.v2.AlgorithmsInRangeResponse
	(*ComponentsAlgorithmsInRangeResponse)(nil),           // 6: scanoss.api.cryptography.v2.ComponentsAlgorithmsInRangeResponse
	(*ComponentAlgorithmsInRangeResponse)(nil),            // 7: scanoss.api.cryptography.v2.ComponentAlgorithmsInRangeResponse
	(*VersionsInRangeResponse)(nil),                       // 8: scanoss.api.cryptography.v2.VersionsInRangeResponse
	(*ComponentsVersionsInRangeResponse)(nil),             // 9: scanoss.api.cryptography.v2.ComponentsVersionsInRangeResponse
	(*ComponentVersionsInRangeResponse)(nil),              // 10: scanoss.api.cryptography.v2.ComponentVersionsInRangeResponse
	(*Hint)(nil),                                          // 11: scanoss.api.cryptography.v2.Hint
	(*ComponentHints)(nil),                                // 12: scanoss.api.cryptography.v2.ComponentHints
	(*HintsResponse)(nil),                                 // 13: scanoss.api.cryptography.v2.HintsResponse
	(*HintsInRangeResponse)(nil),                          // 14: scanoss.api.cryptography.v2.HintsInRangeResponse
	(*ComponentsHintsInRangeResponse)(nil),                // 15: scanoss.api.cryptography.v2.ComponentsHintsInRangeResponse
	(*ComponentHintsInRangeResponse)(nil),                 // 16: scanoss.api.cryptography.v2.ComponentHintsInRangeResponse
	(*ComponentsEncryptionHintsResponse)(nil),             // 17: scanoss.api.cryptography.v2.ComponentsEncryptionHintsResponse
	(*ComponentEncryptionHintsResponse)(nil),              // 18: scanoss.api.cryptography.v2.ComponentEncryptionHintsResponse
	(*AlgorithmResponse_Purls)(nil),                       // 19: scanoss.api.cryptography.v2.AlgorithmResponse.Purls
	(*AlgorithmsInRangeResponse_Purl)(nil),                // 20: scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl
	(*ComponentsAlgorithmsInRangeResponse_Component)(nil), // 21: scanoss.api.cryptography.v2.ComponentsAlgorithmsInRangeResponse.Component
	(*ComponentAlgorithmsInRangeResponse_Component)(nil),  // 22: scanoss.api.cryptography.v2.ComponentAlgorithmsInRangeResponse.Component
	(*VersionsInRangeResponse_Purl)(nil),                  // 23: scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl
	(*ComponentsVersionsInRangeResponse_Component)(nil),   // 24: scanoss.api.cryptography.v2.ComponentsVersionsInRangeResponse.Component
	(*ComponentVersionsInRangeResponse_Component)(nil),    // 25: scanoss.api.cryptography.v2.ComponentVersionsInRangeResponse.Component
	(*HintsResponse_Purls)(nil),                           // 26: scanoss.api.cryptography.v2.HintsResponse.Purls
	(*HintsInRangeResponse_Purl)(nil),                     // 27: scanoss.api.cryptography.v2.HintsInRangeResponse.Purl
	(*ComponentsHintsInRangeResponse_Component)(nil),      // 28: scanoss.api.cryptography.v2.ComponentsHintsInRangeResponse.Component
	(*ComponentHintsInRangeResponse_Component)(nil),       // 29: scanoss.api.cryptography.v2.ComponentHintsInRangeResponse.Component
	(*commonv2.StatusResponse)(nil),                       // 30: scanoss.api.common.v2.StatusResponse
	(*commonv2.EchoRequest)(nil),                          // 31: scanoss.api.common.v2.EchoRequest
	(*commonv2.PurlRequest)(nil),                          // 32: scanoss.api.common.v2.PurlRequest
	(*commonv2.ComponentRequest)(nil),                     // 33: scanoss.api.common.v2.ComponentRequest
	(*commonv2.ComponentsRequest)(nil),                    // 34: scanoss.api.common.v2.ComponentsRequest
	(*commonv2.EchoResponse)(nil),                         // 35: scanoss.api.common.v2.EchoResponse
}
var file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_depIdxs = []int32{
	19, // 0: scanoss.api.cryptography.v2.AlgorithmResponse.purls:type_name -> scanoss.api.cryptography.v2.AlgorithmResponse.Purls
	30, // 1: scanoss.api.cryptography.v2.AlgorithmResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	0,  // 2: scanoss.api.cryptography.v2.ComponentAlgorithms.algorithms:type_name -> scanoss.api.cryptography.v2.Algorithm
	2,  // 3: scanoss.api.cryptography.v2.ComponentsAlgorithmsResponse.components:type_name -> scanoss.api.cryptography.v2.ComponentAlgorithms
	30, // 4: scanoss.api.cryptography.v2.ComponentsAlgorithmsResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	2,  // 5: scanoss.api.cryptography.v2.ComponentAlgorithmsResponse.component:type_name -> scanoss.api.cryptography.v2.ComponentAlgorithms
	30, // 6: scanoss.api.cryptography.v2.ComponentAlgorithmsResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	20, // 7: scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.purls:type_name -> scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl
	30, // 8: scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	21, // 9: scanoss.api.cryptography.v2.ComponentsAlgorithmsInRangeResponse.components:type_name -> scanoss.api.cryptography.v2.ComponentsAlgorithmsInRangeResponse.Component
	30, // 10: scanoss.api.cryptography.v2.ComponentsAlgorithmsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	22, // 11: scanoss.api.cryptography.v2.ComponentAlgorithmsInRangeResponse.component:type_name -> scanoss.api.cryptography.v2.ComponentAlgorithmsInRangeResponse.Component
	30, // 12: scanoss.api.cryptography.v2.ComponentAlgorithmsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	23, // 13: scanoss.api.cryptography.v2.VersionsInRangeResponse.purls:type_name -> scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl
	30, // 14: scanoss.api.cryptography.v2.VersionsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	24, // 15: scanoss.api.cryptography.v2.ComponentsVersionsInRangeResponse.components:type_name -> scanoss.api.cryptography.v2.ComponentsVersionsInRangeResponse.Component
	30, // 16: scanoss.api.cryptography.v2.ComponentsVersionsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	25, // 17: scanoss.api.cryptography.v2.ComponentVersionsInRangeResponse.component:type_name -> scanoss.api.cryptography.v2.ComponentVersionsInRangeResponse.Component
	30, // 18: scanoss.api.cryptography.v2.ComponentVersionsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	11, // 19: scanoss.api.cryptography.v2.ComponentHints.hints:type_name -> scanoss.api.cryptography.v2.Hint
	26, // 20: scanoss.api.cryptography.v2.HintsResponse.purls:type_name -> scanoss.api.cryptography.v2.HintsResponse.Purls
	30, // 21: scanoss.api.cryptography.v2.HintsResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	27, // 22: scanoss.api.cryptography.v2.HintsInRangeResponse.purls:type_name -> scanoss.api.cryptography.v2.HintsInRangeResponse.Purl
	30, // 23: scanoss.api.cryptography.v2.HintsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	28, // 24: scanoss.api.cryptography.v2.ComponentsHintsInRangeResponse.components:type_name -> scanoss.api.cryptography.v2.ComponentsHintsInRangeResponse.Component
	30, // 25: scanoss.api.cryptography.v2.ComponentsHintsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	29, // 26: scanoss.api.cryptography.v2.ComponentHintsInRangeResponse.component:type_name -> scanoss.api.cryptography.v2.ComponentHintsInRangeResponse.Component
	30, // 27: scanoss.api.cryptography.v2.ComponentHintsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	12, // 28: scanoss.api.cryptography.v2.ComponentsEncryptionHintsResponse.components:type_name -> scanoss.api.cryptography.v2.ComponentHints
	30, // 29: scanoss.api.cryptography.v2.ComponentsEncryptionHintsResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	12, // 30: scanoss.api.cryptography.v2.ComponentEncryptionHintsResponse.component:type_name -> scanoss.api.cryptography.v2.ComponentHints
	30, // 31: scanoss.api.cryptography.v2.ComponentEncryptionHintsResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	0,  // 32: scanoss.api.cryptography.v2.AlgorithmResponse.Purls.algorithms:type_name -> scanoss.api.cryptography.v2.Algorithm
	0,  // 33: scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.algorithms:type_name -> scanoss.api.cryptography.v2.Algorithm
	0,  // 34: scanoss.api.cryptography.v2.ComponentsAlgorithmsInRangeResponse.Component.algorithms:type_name -> scanoss.api.cryptography.v2.Algorithm
	0,  // 35: scanoss.api.cryptography.v2.ComponentAlgorithmsInRangeResponse.Component.algorithms:type_name -> scanoss.api.cryptography.v2.Algorithm
	11, // 36: scanoss.api.cryptography.v2.HintsResponse.Purls.hints:type_name -> scanoss.api.cryptography.v2.Hint
	11, // 37: scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.hints:type_name -> scanoss.api.cryptography.v2.Hint
	11, // 38: scanoss.api.cryptography.v2.ComponentsHintsInRangeResponse.Component.hints:type_name -> scanoss.api.cryptography.v2.Hint
	11, // 39: scanoss.api.cryptography.v2.ComponentHintsInRangeResponse.Component.hints:type_name -> scanoss.api.cryptography.v2.Hint
	31, // 40: scanoss.api.cryptography.v2.Cryptography.Echo:input_type -> scanoss.api.common.v2.EchoRequest
	32, // 41: scanoss.api.cryptography.v2.Cryptography.GetAlgorithms:input_type -> scanoss.api.common.v2.PurlRequest
	33, // 42: scanoss.api.cryptography.v2.Cryptography.GetComponentAlgorithms:input_type -> scanoss.api.common.v2.ComponentRequest
	34, // 43: scanoss.api.cryptography.v2.Cryptography.GetComponentsAlgorithms:input_type -> scanoss.api.common.v2.ComponentsRequest
	32, // 44: scanoss.api.cryptography.v2.Cryptography.GetAlgorithmsInRange:input_type -> scanoss.api.common.v2.PurlRequest
	33, // 45: scanoss.api.cryptography.v2.Cryptography.GetComponentAlgorithmsInRange:input_type -> scanoss.api.common.v2.ComponentRequest
	34, // 46: scanoss.api.cryptography.v2.Cryptography.GetComponentsAlgorithmsInRange:input_type -> scanoss.api.common.v2.ComponentsRequest
	32, // 47: scanoss.api.cryptography.v2.Cryptography.GetVersionsInRange:input_type -> scanoss.api.common.v2.PurlRequest
	33, // 48: scanoss.api.cryptography.v2.Cryptography.GetComponentVersionsInRange:input_type -> scanoss.api.common.v2.ComponentRequest
	34, // 49: scanoss.api.cryptography.v2.Cryptography.GetComponentsVersionsInRange:input_type -> scanoss.api.common.v2.ComponentsRequest
	32, // 50: scanoss.api.cryptography.v2.Cryptography.GetHintsInRange:input_type -> scanoss.api.common.v2.PurlRequest
	33, // 51: scanoss.api.cryptography.v2.Cryptography.GetComponentHintsInRange:input_type -> scanoss.api.common.v2.ComponentRequest
	34, // 52: scanoss.api.cryptography.v2.Cryptography.GetComponentsHintsInRange:input_type -> scanoss.api.common.v2.ComponentsRequest
	32, // 53: scanoss.api.cryptography.v2.Cryptography.GetEncryptionHints:input_type -> scanoss.api.common.v2.PurlRequest
	33, // 54: scanoss.api.cryptography.v2.Cryptography.GetComponentEncryptionHints:input_type -> scanoss.api.common.v2.ComponentRequest
	34, // 55: scanoss.api.cryptography.v2.Cryptography.GetComponentsEncryptionHints:input_type -> scanoss.api.common.v2.ComponentsRequest
	35, // 56: scanoss.api.cryptography.v2.Cryptography.Echo:output_type -> scanoss.api.common.v2.EchoResponse
	1,  // 57: scanoss.api.cryptography.v2.Cryptography.GetAlgorithms:output_type -> scanoss.api.cryptography.v2.AlgorithmResponse
	4,  // 58: scanoss.api.cryptography.v2.Cryptography.GetComponentAlgorithms:output_type -> scanoss.api.cryptography.v2.ComponentAlgorithmsResponse
	3,  // 59: scanoss.api.cryptography.v2.Cryptography.GetComponentsAlgorithms:output_type -> scanoss.api.cryptography.v2.ComponentsAlgorithmsResponse
	5,  // 60: scanoss.api.cryptography.v2.Cryptography.GetAlgorithmsInRange:output_type -> scanoss.api.cryptography.v2.AlgorithmsInRangeResponse
	7,  // 61: scanoss.api.cryptography.v2.Cryptography.GetComponentAlgorithmsInRange:output_type -> scanoss.api.cryptography.v2.ComponentAlgorithmsInRangeResponse
	6,  // 62: scanoss.api.cryptography.v2.Cryptography.GetComponentsAlgorithmsInRange:output_type -> scanoss.api.cryptography.v2.ComponentsAlgorithmsInRangeResponse
	8,  // 63: scanoss.api.cryptography.v2.Cryptography.GetVersionsInRange:output_type -> scanoss.api.cryptography.v2.VersionsInRangeResponse
	10, // 64: scanoss.api.cryptography.v2.Cryptography.GetComponentVersionsInRange:output_type -> scanoss.api.cryptography.v2.ComponentVersionsInRangeResponse
	9,  // 65: scanoss.api.cryptography.v2.Cryptography.GetComponentsVersionsInRange:output_type -> scanoss.api.cryptography.v2.ComponentsVersionsInRangeResponse
	14, // 66: scanoss.api.cryptography.v2.Cryptography.GetHintsInRange:output_type -> scanoss.api.cryptography.v2.HintsInRangeResponse
	16, // 67: scanoss.api.cryptography.v2.Cryptography.GetComponentHintsInRange:output_type -> scanoss.api.cryptography.v2.ComponentHintsInRangeResponse
	15, // 68: scanoss.api.cryptography.v2.Cryptography.GetComponentsHintsInRange:output_type -> scanoss.api.cryptography.v2.ComponentsHintsInRangeResponse
	13, // 69: scanoss.api.cryptography.v2.Cryptography.GetEncryptionHints:output_type -> scanoss.api.cryptography.v2.HintsResponse
	18, // 70: scanoss.api.cryptography.v2.Cryptography.GetComponentEncryptionHints:output_type -> scanoss.api.cryptography.v2.ComponentEncryptionHintsResponse
	17, // 71: scanoss.api.cryptography.v2.Cryptography.GetComponentsEncryptionHints:output_type -> scanoss.api.cryptography.v2.ComponentsEncryptionHintsResponse
	56, // [56:72] is the sub-list for method output_type
	40, // [40:56] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_init() }
func file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_init() {
	if File_scanoss_api_cryptography_v2_scanoss_cryptography_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDesc), len(file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_goTypes,
		DependencyIndexes: file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_depIdxs,
		MessageInfos:      file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes,
	}.Build()
	File_scanoss_api_cryptography_v2_scanoss_cryptography_proto = out.File
	file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_goTypes = nil
	file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_depIdxs = nil
}
