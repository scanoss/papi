//
//SPDX-License-Identifier: MIT
//
//Copyright (c) 2023, SCANOSS
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in
//all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.

//**
// Cryptography definition details
//*

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: scanoss/api/cryptography/v2/scanoss-cryptography.proto

package cryptographyv2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	commonv2 "github.com/scanoss/papi/api/commonv2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cryptographic algorithm details
type Algorithm struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the detected algorithm
	Algorithm string `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// Algorithm strength
	Strength      string `protobuf:"bytes,2,opt,name=strength,proto3" json:"strength,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Algorithm) Reset() {
	*x = Algorithm{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm) ProtoMessage() {}

func (x *Algorithm) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm.ProtoReflect.Descriptor instead.
func (*Algorithm) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{0}
}

func (x *Algorithm) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Algorithm) GetStrength() string {
	if x != nil {
		return x.Strength
	}
	return ""
}

// Cryptographic Algorithm response data
type AlgorithmResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cryptography details
	Purls []*AlgorithmResponse_Purls `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmResponse) Reset() {
	*x = AlgorithmResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmResponse) ProtoMessage() {}

func (x *AlgorithmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmResponse.ProtoReflect.Descriptor instead.
func (*AlgorithmResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{1}
}

func (x *AlgorithmResponse) GetPurls() []*AlgorithmResponse_Purls {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *AlgorithmResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Cryptographic Algorithm response data for a given range or criteria
type AlgorithmsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cryptography details
	Purls []*AlgorithmsInRangeResponse_Purl `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmsInRangeResponse) Reset() {
	*x = AlgorithmsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmsInRangeResponse) ProtoMessage() {}

func (x *AlgorithmsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmsInRangeResponse.ProtoReflect.Descriptor instead.
func (*AlgorithmsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{2}
}

func (x *AlgorithmsInRangeResponse) GetPurls() []*AlgorithmsInRangeResponse_Purl {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *AlgorithmsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Versions with/without cryptographic algorithms detected for the given range or criteria
type VersionsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cryptography details
	Purls []*VersionsInRangeResponse_Purl `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionsInRangeResponse) Reset() {
	*x = VersionsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionsInRangeResponse) ProtoMessage() {}

func (x *VersionsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionsInRangeResponse.ProtoReflect.Descriptor instead.
func (*VersionsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{3}
}

func (x *VersionsInRangeResponse) GetPurls() []*VersionsInRangeResponse_Purl {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *VersionsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Structure to record hints of Encryption protocols, libraries, SDKs and frameworks
type Hint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// unique id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of protocol/library/sdk/framework
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A brief description about of the detected usage
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Describe detection category (protocol/library/sdk/framework)
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Link to project main page, repository or documentation
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// The purl of the original library/sdk/framework
	Purl          string `protobuf:"bytes,6,opt,name=purl,proto3" json:"purl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hint) Reset() {
	*x = Hint{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hint) ProtoMessage() {}

func (x *Hint) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hint.ProtoReflect.Descriptor instead.
func (*Hint) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{4}
}

func (x *Hint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Hint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Hint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Hint) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Hint) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Hint) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

// Encryption Hints response data
type HintsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Purl encryption Hint
	Purls []*HintsResponse_Purls `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HintsResponse) Reset() {
	*x = HintsResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintsResponse) ProtoMessage() {}

func (x *HintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintsResponse.ProtoReflect.Descriptor instead.
func (*HintsResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{5}
}

func (x *HintsResponse) GetPurls() []*HintsResponse_Purls {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *HintsResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// *
// Hints of Encryption protocols, libraries, SDKs and frameworks for a purls in range
type HintsInRangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Purl encryption hints
	Purls []*HintsInRangeResponse_Purl `protobuf:"bytes,1,rep,name=purls,proto3" json:"purls,omitempty"`
	// Response status
	Status        *commonv2.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HintsInRangeResponse) Reset() {
	*x = HintsInRangeResponse{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HintsInRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintsInRangeResponse) ProtoMessage() {}

func (x *HintsInRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintsInRangeResponse.ProtoReflect.Descriptor instead.
func (*HintsInRangeResponse) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{6}
}

func (x *HintsInRangeResponse) GetPurls() []*HintsInRangeResponse_Purl {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *HintsInRangeResponse) GetStatus() *commonv2.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

// Information for a given purl
type AlgorithmResponse_Purls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl.
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// PURL version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Algorithms list detected for that version
	Algorithms    []*Algorithm `protobuf:"bytes,3,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmResponse_Purls) Reset() {
	*x = AlgorithmResponse_Purls{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmResponse_Purls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmResponse_Purls) ProtoMessage() {}

func (x *AlgorithmResponse_Purls) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmResponse_Purls.ProtoReflect.Descriptor instead.
func (*AlgorithmResponse_Purls) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AlgorithmResponse_Purls) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *AlgorithmResponse_Purls) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AlgorithmResponse_Purls) GetAlgorithms() []*Algorithm {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

// Information for a given PURL
type AlgorithmsInRangeResponse_Purl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions in that range that contains cryptography
	Versions []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	// Algorithms list detected in that range
	Algorithms    []*Algorithm `protobuf:"bytes,3,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmsInRangeResponse_Purl) Reset() {
	*x = AlgorithmsInRangeResponse_Purl{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmsInRangeResponse_Purl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmsInRangeResponse_Purl) ProtoMessage() {}

func (x *AlgorithmsInRangeResponse_Purl) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmsInRangeResponse_Purl.ProtoReflect.Descriptor instead.
func (*AlgorithmsInRangeResponse_Purl) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AlgorithmsInRangeResponse_Purl) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *AlgorithmsInRangeResponse_Purl) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *AlgorithmsInRangeResponse_Purl) GetAlgorithms() []*Algorithm {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

// Information for a given PURL
type VersionsInRangeResponse_Purl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions that contains cryptography
	VersionsWith []string `protobuf:"bytes,2,rep,name=versions_with,proto3" json:"versions_with,omitempty"`
	// List of versions that do not contain cryptography
	VersionsWithout []string `protobuf:"bytes,3,rep,name=versions_without,proto3" json:"versions_without,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VersionsInRangeResponse_Purl) Reset() {
	*x = VersionsInRangeResponse_Purl{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionsInRangeResponse_Purl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionsInRangeResponse_Purl) ProtoMessage() {}

func (x *VersionsInRangeResponse_Purl) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionsInRangeResponse_Purl.ProtoReflect.Descriptor instead.
func (*VersionsInRangeResponse_Purl) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{3, 0}
}

func (x *VersionsInRangeResponse_Purl) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *VersionsInRangeResponse_Purl) GetVersionsWith() []string {
	if x != nil {
		return x.VersionsWith
	}
	return nil
}

func (x *VersionsInRangeResponse_Purl) GetVersionsWithout() []string {
	if x != nil {
		return x.VersionsWithout
	}
	return nil
}

// Information for a given purl
type HintsResponse_Purls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl.
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// PURL version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Algorithms list detected for that version
	Hints         []*Hint `protobuf:"bytes,3,rep,name=hints,proto3" json:"hints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HintsResponse_Purls) Reset() {
	*x = HintsResponse_Purls{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HintsResponse_Purls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintsResponse_Purls) ProtoMessage() {}

func (x *HintsResponse_Purls) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintsResponse_Purls.ProtoReflect.Descriptor instead.
func (*HintsResponse_Purls) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{5, 0}
}

func (x *HintsResponse_Purls) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *HintsResponse_Purls) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HintsResponse_Purls) GetHints() []*Hint {
	if x != nil {
		return x.Hints
	}
	return nil
}

// Information about the requested purl
type HintsInRangeResponse_Purl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested purl
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// List of versions in range
	Versions []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	// Encryption hints
	Hints         []*Hint `protobuf:"bytes,3,rep,name=hints,proto3" json:"hints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HintsInRangeResponse_Purl) Reset() {
	*x = HintsInRangeResponse_Purl{}
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HintsInRangeResponse_Purl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintsInRangeResponse_Purl) ProtoMessage() {}

func (x *HintsInRangeResponse_Purl) ProtoReflect() protoreflect.Message {
	mi := &file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintsInRangeResponse_Purl.ProtoReflect.Descriptor instead.
func (*HintsInRangeResponse_Purl) Descriptor() ([]byte, []int) {
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP(), []int{6, 0}
}

func (x *HintsInRangeResponse_Purl) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *HintsInRangeResponse_Purl) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *HintsInRangeResponse_Purl) GetHints() []*Hint {
	if x != nil {
		return x.Hints
	}
	return nil
}

var File_scanoss_api_cryptography_v2_scanoss_cryptography_proto protoreflect.FileDescriptor

const file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDesc = "" +
	"\n" +
	"6scanoss/api/cryptography/v2/scanoss-cryptography.proto\x12\x1bscanoss.api.cryptography.v2\x1a*scanoss/api/common/v2/scanoss-common.proto\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"E\n" +
	"\tAlgorithm\x12\x1c\n" +
	"\talgorithm\x18\x01 \x01(\tR\talgorithm\x12\x1a\n" +
	"\bstrength\x18\x02 \x01(\tR\bstrength\"\x9d\x02\n" +
	"\x11AlgorithmResponse\x12J\n" +
	"\x05purls\x18\x01 \x03(\v24.scanoss.api.cryptography.v2.AlgorithmResponse.PurlsR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1a}\n" +
	"\x05Purls\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12F\n" +
	"\n" +
	"algorithms\x18\x03 \x03(\v2&.scanoss.api.cryptography.v2.AlgorithmR\n" +
	"algorithms\"\xad\x02\n" +
	"\x19AlgorithmsInRangeResponse\x12Q\n" +
	"\x05purls\x18\x01 \x03(\v2;.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.PurlR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1a~\n" +
	"\x04Purl\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x1a\n" +
	"\bversions\x18\x02 \x03(\tR\bversions\x12F\n" +
	"\n" +
	"algorithms\x18\x03 \x03(\v2&.scanoss.api.cryptography.v2.AlgorithmR\n" +
	"algorithms\"\x97\x02\n" +
	"\x17VersionsInRangeResponse\x12O\n" +
	"\x05purls\x18\x01 \x03(\v29.scanoss.api.cryptography.v2.VersionsInRangeResponse.PurlR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1al\n" +
	"\x04Purl\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12$\n" +
	"\rversions_with\x18\x02 \x03(\tR\rversions_with\x12*\n" +
	"\x10versions_without\x18\x03 \x03(\tR\x10versions_without\"\x8e\x01\n" +
	"\x04Hint\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\bcategory\x18\x04 \x01(\tR\bcategory\x12\x10\n" +
	"\x03url\x18\x05 \x01(\tR\x03url\x12\x12\n" +
	"\x04purl\x18\x06 \x01(\tR\x04purl\"\x86\x02\n" +
	"\rHintsResponse\x12F\n" +
	"\x05purls\x18\x01 \x03(\v20.scanoss.api.cryptography.v2.HintsResponse.PurlsR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1an\n" +
	"\x05Purls\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x127\n" +
	"\x05hints\x18\x03 \x03(\v2!.scanoss.api.cryptography.v2.HintR\x05hints\"\x94\x02\n" +
	"\x14HintsInRangeResponse\x12L\n" +
	"\x05purls\x18\x01 \x03(\v26.scanoss.api.cryptography.v2.HintsInRangeResponse.PurlR\x05purls\x12=\n" +
	"\x06status\x18\x02 \x01(\v2%.scanoss.api.common.v2.StatusResponseR\x06status\x1ao\n" +
	"\x04Purl\x12\x12\n" +
	"\x04purl\x18\x01 \x01(\tR\x04purl\x12\x1a\n" +
	"\bversions\x18\x02 \x03(\tR\bversions\x127\n" +
	"\x05hints\x18\x03 \x03(\v2!.scanoss.api.cryptography.v2.HintR\x05hints2\xf0\x06\n" +
	"\fCryptography\x12q\n" +
	"\x04Echo\x12\".scanoss.api.common.v2.EchoRequest\x1a#.scanoss.api.common.v2.EchoResponse\" \x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/v2/cryptography/echo\x12\x8b\x01\n" +
	"\rGetAlgorithms\x12\".scanoss.api.common.v2.PurlRequest\x1a..scanoss.api.cryptography.v2.AlgorithmResponse\"&\x82\xd3\xe4\x93\x02 :\x01*\"\x1b/v2/cryptography/algorithms\x12\xa1\x01\n" +
	"\x14GetAlgorithmsInRange\x12\".scanoss.api.common.v2.PurlRequest\x1a6.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse\"-\x82\xd3\xe4\x93\x02':\x01*\"\"/v2/cryptography/algorithmsInRange\x12\x9b\x01\n" +
	"\x12GetVersionsInRange\x12\".scanoss.api.common.v2.PurlRequest\x1a4.scanoss.api.cryptography.v2.VersionsInRangeResponse\"+\x82\xd3\xe4\x93\x02%:\x01*\" /v2/cryptography/versionsInRange\x12\x92\x01\n" +
	"\x0fGetHintsInRange\x12\".scanoss.api.common.v2.PurlRequest\x1a1.scanoss.api.cryptography.v2.HintsInRangeResponse\"(\x82\xd3\xe4\x93\x02\":\x01*\"\x1d/v2/cryptography/hintsInRange\x12\x87\x01\n" +
	"\x12GetEncryptionHints\x12\".scanoss.api.common.v2.PurlRequest\x1a*.scanoss.api.cryptography.v2.HintsResponse\"!\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/v2/cryptography/hintsB\x9e\x02\x92A\xdf\x01\x12y\n" +
	"\x1cSCANOSS Cryptography Service\"T\n" +
	"\x14scanoss-cryptography\x12'https://github.com/scanoss/crpytography\x1a\x13support@scanoss.com2\x032.0*\x01\x012\x10application/json:\x10application/jsonR;\n" +
	"\x03404\x124\n" +
	"*Returned when the resource does not exist.\x12\x06\n" +
	"\x04\x9a\x02\x01\aZ9github.com/scanoss/papi/api/cryptographyv2;cryptographyv2b\x06proto3"

var (
	file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescOnce sync.Once
	file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescData []byte
)

func file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescGZIP() []byte {
	file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescOnce.Do(func() {
		file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDesc), len(file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDesc)))
	})
	return file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDescData
}

var file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_goTypes = []any{
	(*Algorithm)(nil),                      // 0: scanoss.api.cryptography.v2.Algorithm
	(*AlgorithmResponse)(nil),              // 1: scanoss.api.cryptography.v2.AlgorithmResponse
	(*AlgorithmsInRangeResponse)(nil),      // 2: scanoss.api.cryptography.v2.AlgorithmsInRangeResponse
	(*VersionsInRangeResponse)(nil),        // 3: scanoss.api.cryptography.v2.VersionsInRangeResponse
	(*Hint)(nil),                           // 4: scanoss.api.cryptography.v2.Hint
	(*HintsResponse)(nil),                  // 5: scanoss.api.cryptography.v2.HintsResponse
	(*HintsInRangeResponse)(nil),           // 6: scanoss.api.cryptography.v2.HintsInRangeResponse
	(*AlgorithmResponse_Purls)(nil),        // 7: scanoss.api.cryptography.v2.AlgorithmResponse.Purls
	(*AlgorithmsInRangeResponse_Purl)(nil), // 8: scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl
	(*VersionsInRangeResponse_Purl)(nil),   // 9: scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl
	(*HintsResponse_Purls)(nil),            // 10: scanoss.api.cryptography.v2.HintsResponse.Purls
	(*HintsInRangeResponse_Purl)(nil),      // 11: scanoss.api.cryptography.v2.HintsInRangeResponse.Purl
	(*commonv2.StatusResponse)(nil),        // 12: scanoss.api.common.v2.StatusResponse
	(*commonv2.EchoRequest)(nil),           // 13: scanoss.api.common.v2.EchoRequest
	(*commonv2.PurlRequest)(nil),           // 14: scanoss.api.common.v2.PurlRequest
	(*commonv2.EchoResponse)(nil),          // 15: scanoss.api.common.v2.EchoResponse
}
var file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_depIdxs = []int32{
	7,  // 0: scanoss.api.cryptography.v2.AlgorithmResponse.purls:type_name -> scanoss.api.cryptography.v2.AlgorithmResponse.Purls
	12, // 1: scanoss.api.cryptography.v2.AlgorithmResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	8,  // 2: scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.purls:type_name -> scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl
	12, // 3: scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	9,  // 4: scanoss.api.cryptography.v2.VersionsInRangeResponse.purls:type_name -> scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl
	12, // 5: scanoss.api.cryptography.v2.VersionsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	10, // 6: scanoss.api.cryptography.v2.HintsResponse.purls:type_name -> scanoss.api.cryptography.v2.HintsResponse.Purls
	12, // 7: scanoss.api.cryptography.v2.HintsResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	11, // 8: scanoss.api.cryptography.v2.HintsInRangeResponse.purls:type_name -> scanoss.api.cryptography.v2.HintsInRangeResponse.Purl
	12, // 9: scanoss.api.cryptography.v2.HintsInRangeResponse.status:type_name -> scanoss.api.common.v2.StatusResponse
	0,  // 10: scanoss.api.cryptography.v2.AlgorithmResponse.Purls.algorithms:type_name -> scanoss.api.cryptography.v2.Algorithm
	0,  // 11: scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.algorithms:type_name -> scanoss.api.cryptography.v2.Algorithm
	4,  // 12: scanoss.api.cryptography.v2.HintsResponse.Purls.hints:type_name -> scanoss.api.cryptography.v2.Hint
	4,  // 13: scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.hints:type_name -> scanoss.api.cryptography.v2.Hint
	13, // 14: scanoss.api.cryptography.v2.Cryptography.Echo:input_type -> scanoss.api.common.v2.EchoRequest
	14, // 15: scanoss.api.cryptography.v2.Cryptography.GetAlgorithms:input_type -> scanoss.api.common.v2.PurlRequest
	14, // 16: scanoss.api.cryptography.v2.Cryptography.GetAlgorithmsInRange:input_type -> scanoss.api.common.v2.PurlRequest
	14, // 17: scanoss.api.cryptography.v2.Cryptography.GetVersionsInRange:input_type -> scanoss.api.common.v2.PurlRequest
	14, // 18: scanoss.api.cryptography.v2.Cryptography.GetHintsInRange:input_type -> scanoss.api.common.v2.PurlRequest
	14, // 19: scanoss.api.cryptography.v2.Cryptography.GetEncryptionHints:input_type -> scanoss.api.common.v2.PurlRequest
	15, // 20: scanoss.api.cryptography.v2.Cryptography.Echo:output_type -> scanoss.api.common.v2.EchoResponse
	1,  // 21: scanoss.api.cryptography.v2.Cryptography.GetAlgorithms:output_type -> scanoss.api.cryptography.v2.AlgorithmResponse
	2,  // 22: scanoss.api.cryptography.v2.Cryptography.GetAlgorithmsInRange:output_type -> scanoss.api.cryptography.v2.AlgorithmsInRangeResponse
	3,  // 23: scanoss.api.cryptography.v2.Cryptography.GetVersionsInRange:output_type -> scanoss.api.cryptography.v2.VersionsInRangeResponse
	6,  // 24: scanoss.api.cryptography.v2.Cryptography.GetHintsInRange:output_type -> scanoss.api.cryptography.v2.HintsInRangeResponse
	5,  // 25: scanoss.api.cryptography.v2.Cryptography.GetEncryptionHints:output_type -> scanoss.api.cryptography.v2.HintsResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_init() }
func file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_init() {
	if File_scanoss_api_cryptography_v2_scanoss_cryptography_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDesc), len(file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_goTypes,
		DependencyIndexes: file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_depIdxs,
		MessageInfos:      file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_msgTypes,
	}.Build()
	File_scanoss_api_cryptography_v2_scanoss_cryptography_proto = out.File
	file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_goTypes = nil
	file_scanoss_api_cryptography_v2_scanoss_cryptography_proto_depIdxs = nil
}
