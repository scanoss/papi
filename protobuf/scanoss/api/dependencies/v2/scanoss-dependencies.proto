/*
 SPDX-License-Identifier: MIT

   Copyright (c) 2022, SCANOSS

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
 */

/***
 * Dependency definition details
***/
syntax = "proto3";
package scanoss.api.dependencies.v2;

option go_package = "github.com/scanoss/papi/api/dependenciesv2;dependenciesv2";

import "scanoss/api/common/v2/scanoss-common.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "SCANOSS Dependency Service";
    version: "2.0";
    contact: {
      name: "scanoss-dependencies";
      url: "https://github.com/scanoss/dependencies";
      email: "support@scanoss.com";
    };
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

/*
 * Expose all of the SCANOSS Dependency RPCs here
 */
service Dependencies {
  // Standard echo
  rpc Echo(scanoss.api.common.v2.EchoRequest) returns(scanoss.api.common.v2.EchoResponse) {
    option (google.api.http) = {
      post: "/api/v2/dependencies/echo"
      body: "*"
    };
  };
  // Get dependency details
  rpc GetDependencies(DependencyRequest) returns(DependencyResponse) {
    option (google.api.http) = {
      post: "/api/v2/dependencies/dependencies"
      body: "*"
    };
  };
// Get transitive dependency details
  rpc GetTransitiveDependencies(TransitiveDependencyRequest) returns(TransitiveDependencyResponse) {
    option (google.api.http) = {
      post: "/api/v2/dependencies/transitive"
      body: "*"
    };
  };

}

/*
 * Dependency request data (JSON payload)
 */
message DependencyRequest {
  // List of Purls/requirements
  message Purls {
    // Purl name
    string purl = 1;
    // requirement - optional
    string requirement = 2;
//    string scope = 3;  // TODO what did we want scope for?
  }
  // List of dependency files
  message Files {
    // dependency filename
    string file = 1;
    // List of purls
    repeated Purls purls = 2;
  }
  // List of dependency files
  repeated Files files = 1;
  // Depth to go when searching dependencies
  int32 depth = 2;
}

/*
 * Dependency response data (JSON payload)
 */
message DependencyResponse {
  message Licenses {
    string name = 1;
    string spdx_id = 2;
    bool is_spdx_approved = 3;
    string url = 4;
  }
  message Dependencies {
    string component = 1;
    string purl = 2;
    string version = 3;
    repeated Licenses licenses = 4;
    string url = 5;
    string comment = 6;
//    string scope = 7;
  }
  message Files {
    string file = 1;
    string id = 2;
    string status = 3;
    repeated Dependencies dependencies = 4;
  }
  // Dependency response details
  repeated Files files = 1;
  // Response status (required?)
  scanoss.api.common.v2.StatusResponse status = 2;
}

/*
 * Transitive dependency request data (JSON payload)
 */
message TransitiveDependencyRequest {
  // Ecosystem to restrict reporting on (i.e. npm, maven, github, etc.) - optional
  string ecosystem = 1;
  // Depth (number of layers) to go when searching for dependencies - optional
  int32 depth = 2;
  // Limit the number of components reported back - optional
  int32 limit = 3;
  /* TODO: Add scope filters:
      repeated string scopes = 4;
      Using a list of strings allows filtering by multiple scopes simultaneously
      (e.g., include both "dev" and "test" dependencies in a single request)
  */
  // List of Purls from the same ecosystem
  repeated scanoss.api.common.v2.Purl purls = 5;
}

/*
 * Transitive dependency response data (JSON payload)
 */
message TransitiveDependencyResponse {
  message Dependencies {
    string purl = 1;
    string version = 2;
    // optional string scope = 3; // TODO: Add scope field
  }
  // Dependency response details
  repeated Dependencies dependencies = 1;
  // Response status
  scanoss.api.common.v2.StatusResponse status = 2;
}


