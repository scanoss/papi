/*
 SPDX-License-Identifier: MIT

   Copyright (c) 2023, SCANOSS

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
 */

/**
 * Semgrep definition details
 */
syntax = "proto3";
package scanoss.api.semgrep.v2;

option go_package = "github.com/scanoss/papi/api/semgrepv2;semgrepv2";

import "scanoss/api/common/v2/scanoss-common.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "SCANOSS Semgrep Service";
    version: "2.0";
    contact: {
      name: "scanoss-semgrep";
      url: "https://github.com/scanoss/semgrep";
      email: "support@scanoss.com";
    };
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

/**
 * Expose all of the SCANOSS Semgrep Security Analysis RPCs here
 */
service Semgrep {
  // Standard health check endpoint to verify service availability and connectivity
  rpc Echo(scanoss.api.common.v2.EchoRequest) returns(scanoss.api.common.v2.EchoResponse) {
    option (google.api.http) = {
      post: "/v2/semgrep/echo"
      body: "*"
    };
  };
  // [DEPRECATED] Get potential security issues associated with a list of PURLs
  // This method accepts PURL-based requests and is deprecated in favor of GetComponentsIssues
  // which accepts ComponentsRequest for better component identification
  rpc GetIssues(scanoss.api.common.v2.PurlRequest) returns(SemgrepResponse) {
    option deprecated = true;
  };

  // Get potential security issues associated with multiple components
  // This is the current method that accepts ComponentsRequest for enhanced component identification
  // Replaces the deprecated GetIssues method
  rpc GetComponentsIssues(scanoss.api.common.v2.ComponentsRequest) returns(ComponentsIssueResponse) {
    option (google.api.http) = {
      post: "/v2/semgrep/issues/components"
      body: "*"
    };
  };

  // Get potential security issues associated with a single component
  // This is the current method that accepts ComponentRequest for enhanced component identification
  // Replaces the deprecated GetIssues method for single component queries
  rpc GetComponentIssues(scanoss.api.common.v2.ComponentRequest) returns(ComponentIssueResponse) {
    option (google.api.http) = {
      get: "/v2/semgrep/issues/component"
    };
  };
}


// Security issue information detected by Semgrep analysis
message Issue {
  // Unique identifier for the Semgrep rule that detected this issue
  string ruleID = 1;
  // Starting line number where the issue was detected
  string from = 2;
  // Ending line number where the issue was detected
  string to = 3;
  // Severity level of the security issue (e.g., "ERROR", "WARNING", "INFO")
  string severity = 4;
}
// File containing security issues detected by Semgrep
message File {
  // MD5 hash of the file content for integrity verification
  string fileMD5 = 1;
  // Relative path of the file within the component
  string path = 2;
  // List of security issues found in this file
  repeated Issue issues = 3;
}

/**
 * [DEPRECATED] Semgrep issue response data (JSON payload)
 * This message is deprecated. Use ComponentsSemgrepResponse instead for better component handling.
 * Contains security issues detected by Semgrep analysis for components.
 */
message SemgrepResponse {
  option deprecated = true;
  // Information about a given Package URL (PURL)
  message Purls {
    // The Package URL string identifying the component
    string purl = 1;
    // Version of the component being analyzed
    string version = 2;
    // List of files containing security issues
    repeated File files = 3;
  }
  // Security analysis details for each requested component
  repeated Purls purls = 1;
  // Response status indicating success or failure of the request
  scanoss.api.common.v2.StatusResponse status = 2;
}


// Information about a component and its security issues
message ComponentIssueInfo {
  // The Package URL string identifying the component
  string purl = 1;
  // Version of the component being analyzed
  string version = 2;
  // Version requirement specification (e.g., ">=1.0.0", "~2.1.0")
  string requirement = 3;
  // List of files containing security issues in this component
  repeated File files = 4;
}
/**
 * Components issue response data (JSON payload)
 * Contains security issues detected by Semgrep analysis for multiple components.
 * This is the current response format that replaces the deprecated SemgrepResponse.
 */
message ComponentsIssueResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      example: "{\"components\":[{\"purl\":\"pkg:maven/org.apache.commons/commons-lang3\",\"version\":\"3.12.0\",\"requirement\":\"3.12.0\",\"files\":[{\"fileMD5\":\"a1b2c3d4e5f6\",\"path\":\"src/main/java/org/apache/commons/lang3/StringUtils.java\",\"issues\":[{\"ruleID\":\"java.lang.security.audit.crypto.weak-hash\",\"from\":\"156\",\"to\":\"159\",\"severity\":\"WARNING\"},{\"ruleID\":\"java.lang.security.audit.sql-injection.sql-injection\",\"from\":\"284\",\"to\":\"286\",\"severity\":\"ERROR\"}]},{\"fileMD5\":\"b2c3d4e5f6a1\",\"path\":\"src/main/java/org/apache/commons/lang3/Validate.java\",\"issues\":[{\"ruleID\":\"java.lang.security.audit.hardcoded-secret\",\"from\":\"95\",\"to\":\"95\",\"severity\":\"ERROR\"}]}]}],\"status\":{\"status\":\"SUCCESS\",\"message\":\"Security analysis completed successfully\"}}";
    }
  };
  // Security analysis details for each requested component
  repeated ComponentIssueInfo components = 1;
  // Response status indicating success or failure of the request
  scanoss.api.common.v2.StatusResponse status = 2;
}

/**
 * Component issue response data (JSON payload)
 * Contains security issues detected by Semgrep analysis for a single component.
 * This is the current response format that replaces the deprecated SemgrepResponse.
 */
message ComponentIssueResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      example: "{\"component\":{\"purl\":\"pkg:maven/org.apache.commons/commons-lang3\",\"version\":\"3.12.0\",\"requirement\":\"3.12.0\",\"files\":[{\"fileMD5\":\"a1b2c3d4e5f6\",\"path\":\"src/main/java/org/apache/commons/lang3/StringUtils.java\",\"issues\":[{\"ruleID\":\"java.lang.security.audit.sql-injection.sql-injection\",\"from\":\"284\",\"to\":\"286\",\"severity\":\"ERROR\"}]}]},\"status\":{\"status\":\"SUCCESS\",\"message\":\"Security analysis completed successfully\"}}";
    }
  };
  // Security analysis details for the requested component
  ComponentIssueInfo component = 1;
  // Response status indicating success or failure of the request
  scanoss.api.common.v2.StatusResponse status = 2;
}
