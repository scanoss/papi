/*
 SPDX-License-Identifier: MIT

   Copyright (c) 2023, SCANOSS

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
 */

/***
 * Cryptography definition details
***/
syntax = "proto3";
package scanoss.api.cryptography.v2;

option go_package = "github.com/scanoss/papi/api/cryptographyv2;cryptographyv2";

import "scanoss/api/common/v2/scanoss-common.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "SCANOSS Cryptography Service";
    version: "2.0";
    contact: {
      name: "scanoss-cryptography";
      url: "https://github.com/scanoss/crpytography";
      email: "support@scanoss.com";
    };
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

/*
 * Expose all of the SCANOSS Cryptography RPCs here
 */
service Cryptography {
  // Standard echo
  rpc Echo(scanoss.api.common.v2.EchoRequest) returns(scanoss.api.common.v2.EchoResponse) {
    option (google.api.http) = {
      post: "/api/v2/cryptography/echo"
      body: "*"
    };
  };
  // Get Cryptographic algorithms associated with a list of PURLs and, optionally, a requirement
  rpc GetAlgorithms(scanoss.api.common.v2.PurlRequest) returns(AlgorithmResponse) {
    option (google.api.http) = {
      post: "/api/v2/cryptography/algorithms"
      body: "*"
    };
  };
  // Given a list of PURLS and version ranges get a list of cryptographic algorithms used
  rpc GetAlgorithmsInRange(scanoss.api.common.v2.PurlRequest) returns(AlgorithmsInRangeResponse) {
    option (google.api.http) = {
      post: "/api/v2/cryptography/algorithmsInRange"
      body: "*"
    };
  };
  // Given a list of PURLS and version ranges get a list of versions that do/do not contain cryptographic algorithms
  rpc GetVersionsInRange(scanoss.api.common.v2.PurlRequest) returns(VersionsInRangeResponse) {
    option (google.api.http) = {
      post: "/api/v2/cryptography/versionsInRange"
      body: "*"
    };
  };
}

/*
 * Cryptographic Algorithm response data
 */
message AlgorithmResponse {
  // Information about the algorithm
  message Algorithms {
    // Name of the detected algorithm
    string algorithm = 1;
    // Algorithm strength
    string strength = 2;
  }
  // Information for a given purl
  message Purls {
    // The requested purl.
    string purl = 1;
    // PURL version
    string version = 2;
    // Algorithms list detected for that version
    repeated Algorithms algorithms = 3;
  }
  // Cryptography details
  repeated Purls purls = 1;
  // Response status
  scanoss.api.common.v2.StatusResponse status = 2;
}

/*
 * Cryptographic Algorithm response data for a given range or criteria
 */
message AlgorithmsInRangeResponse {
  // Information about the algorithm
  message Algorithm {
    // Name of the detected algorithm
    string algorithm = 1; 
    // Algorithm strength
    string strength = 2;
  }
  // Information for a given PURL
  message Purl {
    // The requested purl
    string purl = 1;
    // List of versions in that range that contains cryptography
    repeated string versions = 2;
    // Algorithms list detected in that range
    repeated Algorithm algorithms = 3;
  }
  // Cryptography details
  repeated Purl purls = 1;
  // Response status
  scanoss.api.common.v2.StatusResponse status = 2;
}

/*
 *  Versions with/without cryptographic algorithms detected for the given range or criteria
 */
 message VersionsInRangeResponse {
  // Information for a given PURL
  message Purl {
    // The requested purl
    string purl = 1;
    // List of versions that contains cryptography
    repeated string versions_with = 2;
    // List of versions that do not contain cryptography
    repeated string versions_without = 3;
  }
  // Cryptography details
  repeated Purl purls = 1;
  // Response status
  scanoss.api.common.v2.StatusResponse status = 2;
}