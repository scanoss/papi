/*
 SPDX-License-Identifier: MIT

   Copyright (c) 2022, SCANOSS

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
 */

/***
 * Component definition details
***/
syntax = "proto3";
package scanoss.api.components.v2;

option go_package = "github.com/scanoss/papi/api/componentsv2;componentsv2";

import "scanoss/api/common/v2/scanoss-common.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "SCANOSS Components Service";
    description: "Provides component intelligence services",
    version: "2.0";
    contact: {
      name: "scanoss-components";
      url: "https://github.com/scanoss/components";
      email: "support@scanoss.com";
    };
  };
  host: "api.scanoss.com"
  schemes: [HTTPS, HTTP];
  security_definitions: {
    security: {
      key: "api_key";
      value: {
        type: TYPE_API_KEY;
        description: "API key for authentication";
        name: "x-api-key";
        in: IN_HEADER;
      }
    }
  };
  security: {
    security_requirement: {
      key: "api_key";
      value: {
        scope: [];
      }
    }
  };
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

/*
 * Expose all of the SCANOSS Component RPCs here
 */
service Components {
  // Standard echo
  rpc Echo(scanoss.api.common.v2.EchoRequest) returns(scanoss.api.common.v2.EchoResponse) {
    option (google.api.http) = {
      post: "/v2/components/echo"
      body: "*"
    };
  };
  // Search for components
  rpc SearchComponents(CompSearchRequest) returns(CompSearchResponse) {
    option (google.api.http) = {
      get: "/v2/components/search"
    };
  };
  // Get all version information for a specific component
  rpc GetComponentVersions(CompVersionRequest) returns(CompVersionResponse) {
    option (google.api.http) = {
      get: "/v2/components/versions"
    };
  };
  // Get the statistics for the specified components
  rpc GetComponentStatistics(scanoss.api.common.v2.ComponentsRequest) returns(ComponentsStatisticResponse) {
    option (google.api.http) = {
      post: "/v2/components/statistics"
      body: "*"
    };
  };
}

/*
 * Component Search request data (JSON payload)
 */
message CompSearchRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      example: "{\"search\": \"scanoss\", \"limit\": 10, \"offset\": 0}";
    }
  };
  // Component to search for (vendor/component/purl). Search is exclusive (will override vendor/component)
  string search = 1;
  // Vendor to search for. Vendor can be combined with Component
  string vendor = 2;
  // Component to search for. Component can be combined with Vendor
  string component = 3;
  // Type of package (purl type) to search for. i.e. github, maven, golang, npm, all - default github
  string package = 4;
  // Number of matches to return - default 50
  int32 limit = 6;
  // Offset to submit to return the next (limit) of component matches
  int32 offset = 7;
}

message CompStatistic {
  message Language {
    string name = 1;
    int32 files = 2;
  }
  int32 total_source_files = 1 [json_name = "total_source_files"];
  int32 total_lines = 2 [json_name = "total_lines"];
  int32 total_blank_lines = 3 [json_name = "total_blank_lines"];
  repeated Language languages = 4;
}

/*
 * Component Statistics response data (JSON payload)
 */
message ComponentsStatisticResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      example: "{\"component_statistics\": [{\"purl\": \"pkg:github/scanoss/engine@5.0.0\", \"version\": \"5.0.0\", \"statistics\": {\"total_source_files\": 156, \"total_lines\": 25430, \"total_blank_lines\": 3420, \"languages\": [{\"name\": \"C\", \"files\": 89}, {\"name\": \"C Header\", \"files\": 45}]}}], \"status\": {\"status\": \"SUCCESS\", \"message\": \"Component statistics successfully retrieved\"}}";
    }
  };
  message ComponentStatistics {
    string purl = 1;
    string version = 2;
    CompStatistic statistics = 3;
  }
  // Component statistic details
  repeated ComponentStatistics component_statistics = 1 [json_name = "component_statistics"];
  // Response status
  scanoss.api.common.v2.StatusResponse status = 2;
}

/*
 * Component Search response data (JSON payload)
 */
message CompSearchResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      example: "{\"components\": [{\"name\": \"scanoss-py\", \"purl\": \"pkg:github/scanoss/scanoss.py\", \"url\": \"https://github.com/scanoss/scanoss.py\", \"component\": \"scanoss-py\"}, {\"name\": \"engine\", \"purl\": \"pkg:github/scanoss/engine\", \"url\": \"https://github.com/scanoss/engine\", \"component\": \"engine\"}], \"status\": {\"status\": \"SUCCESS\", \"message\": \"Components successfully retrieved\"}}";
    }
  };
  // Component details
  message Component {
    string component = 1 [deprecated = true];  // TODO: Remove this message field. Replaced by name in future versions
    string purl = 2;
    string url = 3;
    string name = 4;
  }
  // Component response details
  repeated Component components = 1;
  // Response status (required?)
  scanoss.api.common.v2.StatusResponse status = 2;
}

/*
 * Component Version request data (JSON payload)
 */
message CompVersionRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      example: "{\"purl\": \"pkg:github/scanoss/engine\", \"limit\": 20}";
    }
  };
  // Component to search for (purl)
  string purl = 1;
  // Number of versions to return - default 50
  int32 limit = 2;
}

/*
 * Component Version response data (JSON payload)
 */
message CompVersionResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      example: "{\"component\": {\"name\": \"engine\", \"purl\": \"pkg:github/scanoss/engine\", \"url\": \"https://github.com/scanoss/engine\", \"versions\": [{\"version\": \"5.0.0\", \"licenses\": [{\"name\": \"GNU General Public License v2.0\", \"spdx_id\": \"GPL-2.0\", \"is_spdx_approved\": true, \"url\": \"https://spdx.org/licenses/GPL-2.0.html\"}], \"date\": \"2024-01-15T10:30:00Z\"}], \"component\": \"engine\"}, \"status\": {\"status\": \"SUCCESS\", \"message\": \"Component versions successfully retrieved\"}}";
    }
  };
  // License details
  message License {
    string name = 1;
    string spdx_id = 2 [json_name = "spdx_id"];
    bool is_spdx_approved = 3 [json_name = "is_spdx_approved"];
    string url = 4;
  }
  // Version details (including license)
  message Version {
    string version = 1;
    repeated License licenses = 4;
    // Release date of the version
    string date = 5;
  }
  // Component details (including versions)
  message Component {
    string component = 1 [deprecated = true]; // TODO: Remove this message field. Replaced by name in future versions
    string purl = 2;
    string url = 3;
    repeated Version versions = 4;
    string name = 5;
   }
  // Component response details
  Component component = 1;
  // Response status
  scanoss.api.common.v2.StatusResponse status = 2;
}
