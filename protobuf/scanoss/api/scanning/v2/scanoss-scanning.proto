/*
 SPDX-License-Identifier: MIT

   Copyright (c) 2024, SCANOSS

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
 */

/***
 Scanning definition details
***/
syntax = "proto3";
package scanoss.api.scanning.v2;

option go_package = "github.com/scanoss/papi/api/scanningv2;scanningv2";

import "scanoss/api/common/v2/scanoss-common.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "SCANOSS Scanning Service";
        version: "2.0";
        contact: {
            name: "scanoss-scanning";
            url: "https://github.com/scanoss/scanning";
            email: "support@scanoss.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist.";
            schema: {
                json_schema: {
                    type: STRING;
                }
            }
        }
    }
};

/**
 * Expose all of the SCANOSS Scanning RPCs here
 */
service Scanning {
  // Standard echo
    rpc Echo(scanoss.api.common.v2.EchoRequest) returns(scanoss.api.common.v2.EchoResponse) {
        option (google.api.http) = {
            post: "/api/v2/scanning/echo"
            body: "*"
        };
    };
    // Scan the given folder request looking for matches
    rpc FolderHashScan(HFHRequest) returns(HFHResponse) {
        option (google.api.http) = {
            post: "/api/v2/scanning/hfh/scan"
            body: "*"
        };
    };
}

/*
 * High precision Folder Hashing scan request
 */
message HFHRequest {
    // Child node from the folder structure
    message Children {
        // Folder path (can be actual or obfuscated)
        string path_id = 1;
        // Proximity hash calculated from this nodes filenames (and their children).
        string sim_hash_names = 2;
        // Proximity hash calculated from this nodes file contents (and their children).
        string sim_hash_content = 3;
        // Sub-folders inside this child
        repeated Children children = 4;
        // Proximity hash calculated from this nodes directory names (and their children).
        string sim_hash_dir_names = 5;
        // Language extensions count (dictionary) - language name -> count
        map<string, int32> lang_extensions = 6;
    }
     // Report best match (most hits) or not. Default: false
    bool best_match = 1 [deprecated = true];

     // Detection threshold (distance) for component selection. Default: 60
    int32 threshold = 2 [deprecated = true];

     // Folder root node to be scanned
    Children root = 3;

     // Get results with rank above this threshold (e.g i only want to see results from rank 3 and above)
    int32 rank_threshold = 4; // TODO: Discuss naming?

     // Filter results by category (e.g i only want to see results from github projects, npm, etc)
    string category = 5;

    // Maximum number of results to query
    int32 query_limit = 6;    
}

/*
 * High precision Folder Hashing scan response
 */
message HFHResponse {
    // Matched component details
    message Component {
        // Component PURL
        string purl = 1;
        // Component match version (could be multiple)
        repeated string versions = 2;
        // Component Ranking from 1 to 10. 1 means official well known repository, 10 might be garbage.
        int32 rank = 3;

        string version = 4;
    }
    // Result item, link a path with a list of components
    message Result {
        // Folder path (can be actual or obfuscated)
        string path_id = 1;
        // List of matching components
        repeated Component components = 2;
        //Matching probability
        float probability = 3 [deprecated = true];
        //result stage
        int32 stage = 4 [deprecated = true];
    }
    // List of folders containing unique components
    repeated Result results = 1;
    scanoss.api.common.v2.StatusResponse status = 2;
}
