/*
 SPDX-License-Identifier: MIT

   Copyright (c) 2021, SCANOSS

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
 */

/***
 Folder Hashing Scanning definition details
***/
syntax = "proto3";
package scanoss.api.scanning.folderhashing;

option go_package = "github.com/scanoss/hfh/pkg/generated";

/**
 * Expose all of the SCANOSS Provenance RPCs here
 */
service FolderHashing {
  // Standard echo
  rpc Echo(scanoss.api.common.v2.EchoRequest) returns(scanoss.api.common.v2.EchoResponse) {
    option (google.api.http) = {
      post: "/api/v2/scanning/folderhashing/echo"
      body: "*"
    };
  };

  rpc FolderhashingScan(Request) returns (Response) {
     option (google.api.http) = {
      post: "/api/v2/scanning/folderhashing/scan"
      body: "*"
    };
  }
}

 
/**
 * Folder hashing request data (JSON payload)
 */
 //Represents one node from the folder structure
 message ChildRequest {
    // Folder path or folder path hash
    string path_id = 1;
    // Proximity hash calculated from the node file names and its childrens.
    bytes simHashNames = 2;
    // Proximity hash calculated from the node file content and its childrens.
    bytes simHashContent = 3;
    // Subfolders inside the folder
    repeated ChildRequest children = 4;

}
// FolderHashing scanning service request
message Request {
    //Report multiple components [default: false] if there were more than one, or only the one most hitted.
    bool mainComponentOnly = 1;
    //Detection threshold
    int32 threshold =2;
    //Root node
    ChildRequest root =3;
}


/**
 * Folder hashing response data (JSON payload)
 */

message Response {
    //Report component element
    message Component {
        //Component purl
        string purl = 1;
        //matched purl versions
        repeated string versions = 2;
        // Result confidence
        float confidence = 3;
    }
    //Result item, link a path with a list of components
    message Item {
        string path_id = 1;
        repeated Component = 2;
    }

    // Folder paths or folder path hashes
    repeated Item results = 1
}
