/*
 SPDX-License-Identifier: MIT

   Copyright (c) 2022, SCANOSS

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
 */

/***
 * License definition details
***/
syntax = "proto3";
package scanoss.api.licenses.v2;

option go_package = "github.com/scanoss/papi/api/licensesv2;licensesv2";

import "scanoss/api/common/v2/scanoss-common.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "SCANOSS License Service";
    version: "2.0";
    contact: {
      name: "scanoss-licenses";
      url: "https://github.com/scanoss/licenses";
      email: "support@scanoss.com";
    };
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

/*
 * Expose all of the SCANOSS License RPCs here
 */
service LicenseService {
  // Standard echo
  rpc Echo(scanoss.api.common.v2.EchoRequest) returns(scanoss.api.common.v2.EchoResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/echo"
      body: "*"
    };
  };
  // Get basic license info given a purl
  rpc GetByPurl(scanoss.api.common.v2.PurlRequest) returns(GetByPurlResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/purl"
      body: "*"
    };
  };

  // Get detailed license metadata for a specific license ID
  rpc GetLicenseDetails(GetLicenseDetailsRequest) returns(GetLicenseDetailsResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/details"
      body: "*"
    };
  };

  // Get license obligations and compliance data
  rpc GetLicenseObligations(GetLicenseObligationsRequest) returns(GetLicenseObligationsResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/obligations"
      body: "*"
    };
  };

  // Search licenses given a query
  rpc Search(LicenseSearchRequest) returns(LicenseSearchResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/search"
      body: "*"
    };
  };
}



message OSADLUseCase {
  string name = 1;              // "Binary delivery", "Network service", "Source code delivery"
  string obligation_text = 2;
  string obligation_json = 3;
}

/*
 * OSADL (Open Source Automation Development Lab) License Compliance System
 * 
 * OSADL creates structured compliance checklists for each license using a canonical vocabulary system.
 * The system breaks down complex legal language into machine-readable components:
 * 
 * - Language Elements: Legal modifiers like "YOU MUST", "YOU MUST NOT", "IF", "EXCEPT IF"
 * - Actions: What to do - "Provide", "Include", "Distribute", "Attribute"
 * - Terms: What objects - "Copyright notice", "License text", "Source code"
 * 
 * These combine into precise obligations like: "YOU MUST Provide Copyright notice"
 * which breaks down to Language="YOU MUST", Action="Provide", Term="Copyright notice"
 * 
 * This creates consistent, unambiguous license compliance guidance across all licenses.
 */
message OSADL {
  string checklist_json_url = 1;          // https://www.osadl.org/fileadmin/checklists/jsonlicenses/AGPL-3.0-or-later.json
  string checklist_text_url = 2;    // https://www.osadl.org/fileadmin/checklists/unreflicenses/AGPL-3.0-or-later.txt
  string checklist_optimized_json_url = 3; // https://www.osadl.org/fileadmin/checklists/jsonlicenses-opt/AGPL-3.0-or-later-opt.json
  bool copyleft_clause = 4;
  bool patent_hints = 5;
  repeated string compatibility = 6;        // Compatible licenses
  repeated string depending_compatibility = 7; // Conditionally compatible
  repeated string incompatibility = 8;      // Incompatible licenses
  repeated OSADLUseCase use_cases = 9;
}


enum OSICategory {
  CATEGORY_UNSPECIFIED = 0;
  INTERNATIONAL = 1;
  NON_REUSABLE = 2;
  OTHER_MISCELLANEOUS = 3;
  POPULAR_STRONG_COMMUNITY = 4;
  REDUNDANT_WITH_MORE_POPULAR = 5;
  SPECIAL_PURPOSE = 6;
  SUPERSEDED = 7;
  UNCATEGORIZED = 8;
  VOLUNTARILY_RETIRED = 9;
}

message OSI {
  bool is_osi_approved = 1;
  string submission_date = 2;
  string submitter = 3;
  string approval_date = 4;
  string board_minutes_url = 5;
  // The organization or entity that maintains and controls the official version of the license (e.g., "Free Software Foundation")
  string steward = 6;
  // URL to the authoritative/canonical license text hosted by the steward organization
  string steward_url = 7;
  // OSI category classification for this license
  OSICategory category = 9;
}

message SPDXCrossRef {
  string url = 1;
  bool is_valid = 2;
  bool is_live = 3;
  string timestamp = 4;
  bool is_wayback_link = 5;
  int32 order = 6;
  string match = 7;
}

message LicenseException {
  string id = 1;                      // "Classpath-exception-2.0"
  string name = 2;                    // "Classpath exception 2.0"
  string details_url = 3;             // SPDX exception JSON URL
  repeated string see_also = 5;       // Reference URLs
  bool is_deprecated = 6;             // Exception is deprecated
}

message SPDX {
  string id = 1;                     // "GPL-2.0-only", "MIT" - the SPDX license identifier
  string name = 2;                   // Official SPDX license name
  string details_url = 4;            // JSON API URL for full details
  string reference_url = 5;          // HTML page URL
  bool is_deprecated = 6;            // License is deprecated
  bool is_fsf_libre = 7;             // FSF considers it libre/free
  repeated string see_also = 8;      // Related URLs
  repeated SPDXCrossRef cross_refs = 9; // Structured cross-references with validation info
  repeated LicenseException exceptions = 10; // SPDX exceptions applied to this license (empty if none)
}


enum LicenseType {
  PERMISSIVE = 0;
  COPYLEFT = 1;
  COMMERCIAL = 2;
  PROPRIETARY = 3;
  PUBLIC_DOMAIN = 4;
}

message SCANOSS {
  LicenseType license_type = 1;  // SCANOSS categorization
  string scanoss_id = 2;         // Internal SCANOSS identifier
  string risk_level = 3;         // "LOW", "MEDIUM", "HIGH"
  repeated string tags = 4;      // ["viral", "attribution", "patent-grant"]
}

message BasicLicense {
  string full_name = 1;             // Expanded license name (e.g., "General Public License version 2.0", "MIT License")
  string id = 2;                    // SPDX identifier or licenseRef (e.g., "GPL-2.0-only", "MIT", "licenseRef-GitLab-Enterprise")
}

message License {
  string name = 1;                  // Parsed license portion from license_statement (e.g., "MIT", "GPL-2.0 WITH Classpath-exception-2.0")
  SPDX spdx = 3;                    // Optional - SPDX data including license_id and exceptions (null if not in SPDX registry)
  OSADL osadl = 4;                  // Optional - OSADL compliance metadata (null for custom/proprietary)
  OSI osi = 5;                      // Optional - OSI approval metadata (null if not OSI approved)
  SCANOSS scanoss = 6;              // Always present - SCANOSS can analyze any license
}

message GetByPurlResponse {
  // Raw license statement as declared in source code
  string statement = 1;
  // Individual licenses parsed from the statement with basic info
  repeated BasicLicense licenses = 2;
  // Request status
  scanoss.api.common.v2.StatusResponse status = 3;
}

message GetLicenseDetailsRequest {
  string license_id = 1;            // SPDX identifier or licenseRef (e.g., "MIT", "licenseRef-GitLab-Enterprise")
}

message GetLicenseDetailsResponse {
  License license = 1;              // Full license details with all metadata
  scanoss.api.common.v2.StatusResponse status = 2;
}

message GetLicenseObligationsRequest {
  string license_id = 1;            // SPDX identifier or licenseRef
}

message GetLicenseObligationsResponse {
  OSADL obligations = 1;            // OSADL compliance data with use cases and obligations
  scanoss.api.common.v2.StatusResponse status = 2;
}


message LicenseSearchRequest {
  // This could be either name, spdx_id, whether if it's copyleft or not, etc
  string query = 1;
  // User could query for permissive, copyleft, etc
  repeated LicenseType license_types = 2;
}

message LicenseSearchResponse {
  // List of licenses
  repeated License licenses = 1;
  // Request status
  scanoss.api.common.v2.StatusResponse status = 2;
}
