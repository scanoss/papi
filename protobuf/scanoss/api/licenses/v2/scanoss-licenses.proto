/*
 SPDX-License-Identifier: MIT

   Copyright (c) 2022, SCANOSS

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
 */

/***
 * License definition details
***/
syntax = "proto3";
package scanoss.api.licenses.v2;

option go_package = "github.com/scanoss/papi/api/licensesv2;licensesv2";

import "scanoss/api/common/v2/scanoss-common.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "SCANOSS License Service";
    version: "2.0";
    contact: {
      name: "scanoss-licenses";
      url: "https://github.com/scanoss/licenses";
      email: "support@scanoss.com";
    };
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

/*
 * Expose all of the SCANOSS License RPCs here
 */
service LicenseService {
  // Standard echo
  rpc Echo(scanoss.api.common.v2.EchoRequest) returns(scanoss.api.common.v2.EchoResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/echo"
      body: "*"
    };
  };

  // Get basic license info given a purl
  rpc GetBasic(scanoss.api.common.v2.PurlRequest) returns(BasicResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/purl"
      body: "*"
    };
  };

  // Get detailed metadata for a specific license
  rpc GetDetails(DetailsRequest) returns(DetailsResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/details"
      body: "*"
    };
  };

  // Get obligations and compliance data for a license
  rpc GetObligations(ObligationsRequest) returns(ObligationsResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/obligations"
      body: "*"
    };
  };

  // TODO: Add method - Search licenses given a query
}



// ========================================================================
// ENUMS
// ========================================================================

enum Type {
  UNKNOWN = 0;
  PERMISSIVE = 1;
  COPYLEFT = 2;
  COMMERCIAL = 3;
  PROPRIETARY = 4;
  PUBLIC_DOMAIN = 5;
}

// ========================================================================
// CORE DATA STRUCTURES
// ========================================================================

message SPDXCrossRef {
  string url = 1;
  bool is_valid = 2;
  bool is_live = 3;
  string timestamp = 4;
  bool is_wayback_link = 5;
  int32 order = 6;
  string match = 7;
}

message SPDXException {
  string id = 1;                      // "Classpath-exception-2.0"
  string full_name = 2;               // "Classpath exception 2.0"
  string details_url = 3;             // SPDX exception JSON URL
  repeated string see_also = 5;       // Reference URLs
  bool is_deprecated = 6;             // Exception is deprecated
}

message SPDX {
  string id = 1;                     // "GPL-2.0-only", "MIT" - the SPDX license identifier
  string full_name = 2;              // Official SPDX registry name (empty if license not in SPDX registry)
  string details_url = 4;            // JSON API URL for full details
  string reference_url = 5;          // HTML page URL
  bool is_deprecated = 6;            // License is deprecated
  bool is_fsf_libre = 7;             // FSF considers it libre/free
  bool is_osi_approved = 8;
  repeated string see_also = 9;      // Related URLs
  repeated SPDXCrossRef cross_refs = 10; // Structured cross-references with validation info
  repeated SPDXException exceptions = 11; // SPDX exceptions applied to this license (empty if none)
}

message OSADLUseCase {
  string name = 1;              // "Binary delivery", "Network service", "Source code delivery"
  string obligation_text = 2;
  string obligation_json = 3;
}

/*
 * OSADL creates structured compliance checklists for each license using a canonical vocabulary system.
 * The system breaks down complex legal language into machine-readable components:
 * 
 * - Language Elements: Legal modifiers like "YOU MUST", "YOU MUST NOT", "IF", "EXCEPT IF"
 * - Actions: What to do - "Provide", "Include", "Distribute", "Attribute"
 * - Terms: What objects - "Copyright notice", "License text", "Source code"
 * 
 * These combine into precise obligations like: "YOU MUST Provide Copyright notice"
 * which breaks down to Language="YOU MUST", Action="Provide", Term="Copyright notice"
 * 
 * This creates consistent, unambiguous license compliance guidance across all licenses.
 */
message OSADL {
  string checklist_json_url = 1;          // https://www.osadl.org/fileadmin/checklists/jsonlicenses/AGPL-3.0-or-later.json
  string checklist_text_url = 2;    // https://www.osadl.org/fileadmin/checklists/unreflicenses/AGPL-3.0-or-later.txt
  string checklist_optimized_json_url = 3; // https://www.osadl.org/fileadmin/checklists/jsonlicenses-opt/AGPL-3.0-or-later-opt.json
  bool copyleft_clause = 4;
  bool patent_hints = 5;
  repeated string compatibility = 6;        // Compatible licenses
  repeated string depending_compatibility = 7; // Conditionally compatible
  repeated string incompatibility = 8;      // Incompatible licenses
  repeated OSADLUseCase use_cases = 9;
}

// ========================================================================
// LICENSE REPRESENTATIONS
// ========================================================================

message BasicLicense {
  // Identifier for an individual license extracted from the license statement, following SPDX conventions
  // - For SPDX registry licenses: Standard SPDX ID (e.g., "MIT", "GPL-2.0-only")
  // - For non-registry licenses: licenseRef format (e.g., "licenseRef-GitLab-Enterprise")
  string id = 1;

  // Best human-readable license name (normalized when possible)
  // - For SPDX licenses: Official SPDX name (e.g., "MIT License", "GNU General Public License v2.0 only")
  // - For non SPDX licenses: Best normalized name from SCANOSS database or original statement
  // Note: May match SPDX.full_name for registry licenses, but serves different purpose (best effort vs official registry)
  string full_name = 2;
}

message License {
  // Best human-readable license name (normalized when possible)
  // - For SPDX licenses: Official SPDX name (e.g., "MIT License", "GNU General Public License v2.0 only")
  // - For non SPDX licenses: Best normalized name from SCANOSS database or original statement
  // Note: May match SPDX.full_name for registry licenses, but serves different purpose (best effort vs official registry)
  string full_name = 1;

  Type type = 2;
  SPDX spdx = 3;                    // Always present - SPDX.id always populated, other fields empty if not in SPDX License list
  OSADL osadl = 4;                  // Optional - OSADL compliance metadata
  //SCANOSS scanoss = 6;            // For future use, specific SCANOSS metadata
}

// ========================================================================
// API MESSAGES
// ========================================================================

// GetBasic endpoint
message BasicResponse {
  string statement = 1;             // Raw license statement as declared in source code
  repeated BasicLicense licenses = 2; // Individual licenses parsed from the statement with basic info
  scanoss.api.common.v2.StatusResponse status = 3;
}

// GetDetails endpoint
message DetailsRequest {
  string id = 1;                    // SPDX identifier or licenseRef (e.g., "MIT", "licenseRef-GitLab-Enterprise")
}

message DetailsResponse {
  License license = 1;              // Full license details with all metadata
  scanoss.api.common.v2.StatusResponse status = 2;
}

// GetObligations endpoint
message ObligationsRequest {
  string id = 1;                    // SPDX identifier or licenseRef
}

message ObligationsResponse {
  OSADL obligations = 1;            // OSADL compliance data with use cases and obligations
  scanoss.api.common.v2.StatusResponse status = 2;
}

// ========================================================================
// USAGE EXAMPLES
// ========================================================================

/*
 * Example 1: Multiple SPDX Licenses
 * 
 * Query: GetBasic({ purl: "pkg:github/org/dual-licensed@1.0.0"})
 * Response:
 * {
 *   "statement": "MIT OR Apache-2.0",
 *   "licenses": [
 *     {
 *       "id": "MIT",
 *       "full_name": "MIT License"
 *     },
 *     {
 *       "id": "Apache-2.0", 
 *       "full_name": "Apache License 2.0"
 *     }
 *   ]
 * }
 */

/*
 * Example 2: Mixed SPDX and Custom License
 * 
 * Query: GetBasic({ purl: "pkg:github/enterprise-lib@1.0.0" })
 * Response:
 * {
 *   "statement": "GPL-3.0-only OR MyCompany Commercial License",
 *   "licenses": [
 *     {
 *       "id": "GPL-3.0-only",
 *       "full_name": "GNU General Public License v3.0 only"
 *     },
 *     {
 *       "id": "licenseRef-MyCompany-Commercial",
 *       "full_name": "MyCompany Commercial License"
 *     }
 *   ]
 * }
 */

/*
 * Example 3: GetDetails for SPDX License
 * 
 * Query: GetDetails({"id": "MIT"})
 * 
 * Response:
 * {
 *   "license": {
 *     "full_name": "MIT License",
 *     "type": "PERMISSIVE",
 *     "spdx": {
 *       "id": "MIT",
 *       "full_name": "MIT License",
 *       "details_url": "https://spdx.org/licenses/MIT.json",
 *       "reference_url": "https://spdx.org/licenses/MIT.html",
 *       "is_deprecated": false,
 *       "is_fsf_libre": true,
 *       "is_osi_approved": true
 *     },
 *     "osadl": {
 *       "checklist_json_url": "https://www.osadl.org/fileadmin/checklists/jsonlicenses/MIT.json",
 *       "copyleft_clause": false,
 *       "patent_hints": false
          ....
 *     }
 *   }
 * }
 */

/*
 * Example 4: GetDetails for Custom License
 * 
 * Query: GetDetails({"id": "licenseRef-MyCompany-Commercial"})
 * 
 * Response:
 * {
 *   "license": {
 *     "full_name": "MyCompany Commercial License",
 *     "type": "COMMERCIAL",
 *     "spdx": {
 *       "id": "licenseRef-MyCompany-Commercial",
 *     },
 *     "osadl": null  // No OSADL data for custom licenses
 *   }
 * }
 */