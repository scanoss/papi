/*
 SPDX-License-Identifier: MIT

   Copyright (c) 2025, SCANOSS

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
 */

/***
 * License definition details
***/
syntax = "proto3";
package scanoss.api.licenses.v2;

option go_package = "github.com/scanoss/papi/api/licensesv2;licensesv2";

import "scanoss/api/common/v2/scanoss-common.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "SCANOSS License Service";
    description: "License service provides license intelligence for software components.";
    version: "2.0";
    contact: {
      name: "scanoss-licenses";
      url: "https://github.com/scanoss/licenses";
      email: "support@scanoss.com";
    };
  };
  host: "api.scanoss.com";
  schemes: [HTTP, HTTPS];
  consumes: "application/json";
  produces: "application/json";
};

/*
 * License Service Definition
 */
service License {
  /*
   * Returns the same message that was sent, used for health checks and connectivity testing
   */
  rpc Echo(scanoss.api.common.v2.EchoRequest) returns(scanoss.api.common.v2.EchoResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/echo"
      body: "*"
    };
  };

  /*
  * Get license information for a single software component.
  *
  * Examines source code, license files, and package metadata to determine which licenses apply to the component.
  * Returns license data in both individual SPDX license and SPDX expressions when determinable.
  *
  * See: https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/licenses/v2/README.md?tab=readme-ov-file#getcomponentlicenses
  */
  rpc GetComponentLicenses(scanoss.api.common.v2.ComponentRequest) returns(ComponentLicenseResponse) {
    option (google.api.http) = {
      get: "/api/v2/licenses/component";
    };
  };

  /*
   * Get license information for multiple software components in a single request.
   *
   * Examines source code, license files, and package metadata to determine which licenses apply to each component.
   * Returns license data in both individual SPDX license and SPDX expressions when determinable.
   *
   * See https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/licenses/v2/README.md?tab=readme-ov-file#getcomponentslicenses
   */
  rpc GetComponentsLicenses(scanoss.api.common.v2.ComponentsRequest) returns(ComponentsLicenseResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/components"
      body: "*"
    };
  };

  /*
   * Get detailed metadata for a specific license by SPDX identifier.
   *
   * Provides comprehensive license information including SPDX registry data,
   * OSADL compliance metadata, license type classification, and official references.
   */
  rpc GetDetails(LicenseRequest) returns(LicenseDetailsResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/details"
      body: "*"
    };
  };

  /*
   * Get compliance obligations and usage requirements for a specific license.
   *
   * Returns structured OSADL compliance data including use cases, obligations,
   * compatibility information, and patent hints for the specified license.
   */
  rpc GetObligations(LicenseRequest) returns(ObligationsResponse) {
    option (google.api.http) = {
      post: "/api/v2/licenses/obligations"
      body: "*"
    };
  };
}

/*
 * Response message for GetComponentLicenses method.
 * 
 * Contains license information for a single software component including
 * discovered licenses and SPDX expressions when determinable.
 */
message ComponentLicenseResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      example: "{\"component\":{\"purl\": \"pkg:github/scanoss/engine@1.0.0\", \"requirement\": \"\", \"version\": \"1.0.0\", \"statement\": \"GPL-2.0\", \"licenses\": [{\"id\": \"GPL-2.0\", \"full_name\": \"GNU General Public License v2.0 only\"}]}, \"status\": {\"status\": \"SUCCESS\", \"message\": \"Licenses Successfully retrieved\"}}";
    }
  };
  // License info for the component
  ComponentLicenseInfo component = 1;
  scanoss.api.common.v2.StatusResponse status = 2;
}

/*
 * Response message for GetComponentsLicenses method.
 * 
 * Contains license information for multiple software components processed
 * in a single batch request. Each component is analyzed independently.
 */
message ComponentsLicenseResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      example: "{\"components\":[{\"purl\": \"pkg:github/scanoss/engine@1.0.0\", \"requirement\": \"\", \"version\": \"1.0.0\", \"statement\": \"GPL-2.0\", \"licenses\": [{\"id\": \"GPL-2.0\", \"full_name\": \"GNU General Public License v2.0 only\"}]}, {\"purl\": \"pkg:github/scanoss/scanoss.py@v1.30.0\",\"requirement\": \"\",\"version\": \"v1.30.0\",\"statement\": \"MIT\", \"licenses\": [{\"id\": \"MIT\",\"full_name\": \"MIT License\"}]}  ], \"status\": {\"status\": \"SUCCESS\", \"message\": \"Licenses Successfully retrieved\"}}";
    }
  };
  // License info for each component in the batch
  repeated ComponentLicenseInfo components = 1;
  scanoss.api.common.v2.StatusResponse status = 2;
}

/*
 * Response message for GetDetails method.
 * 
 * Provides comprehensive license metadata including SPDX registry information,
 * OSADL compliance data, license type classification, and official references.
 */
message LicenseDetailsResponse {
  // Full license details with all metadata
  LicenseDetails license = 1;
  scanoss.api.common.v2.StatusResponse status = 2;
}

/*
 * Response message for GetObligations method.
 * 
 * Contains structured compliance obligations and usage requirements from
 * OSADL database including use cases, compatibility, and patent information.
 */
message ObligationsResponse {
  // OSADL compliance data with use cases and obligations
  OSADL obligations = 1;
  scanoss.api.common.v2.StatusResponse status = 2;
}

/*
 * Classification of license types based on their usage restrictions and obligations.
 * 
 * Used to categorize licenses by their general characteristics and compliance requirements.
 */
enum LicenseType {
  // License type could not be determined or classified
  UNKNOWN = 0;
  // Allows liberal use with minimal restrictions (e.g., MIT, BSD, Apache)
  PERMISSIVE = 1;
  // Requires derivative works to be distributed under the same license (e.g., GPL, LGPL)
  COPYLEFT = 2;
  // Requires payment or commercial licensing agreement
  COMMERCIAL = 3;
  // Proprietary license with restricted usage rights
  PROPRIETARY = 4;
  // No copyright restrictions, dedicated to public domain (e.g., CC0, Unlicense)
  PUBLIC_DOMAIN = 5;
}

/*
 * SPDX license registry metadata.
 */
message SPDX {

  /*
   * Cross-reference information for SPDX license URLs.
   * 
   * Contains metadata about license reference URLs and their compliance with SPDX 
   * License Matching Guidelines.
   * See: https://spdx.github.io/spdx-spec/v2.3/license-matching-guidelines-and-templates/
   */
  message SPDXCrossRef {
    // Reference URL to the license text
    string url = 1;
    // Indicates if SPDX considers this URL an authoritative/trustworthy source for the license.
    bool is_valid = 2;
    // Whether the URL is currently accessible via HTTP request
    bool is_live = 3;
    // ISO 8601 timestamp when the validation was last performed
    string timestamp = 4;
    // Whether this URL points to an archived/Wayback Machine version
    bool is_wayback_link = 5;
    // Display order/priority for multiple references (0-based)
    int32 order = 6;
    // SPDX License Matching Guidelines compliance result:
    // "true" - URL content matches SPDX template patterns (suitable for automated validation)
    // "false" - URL content doesn't match patterns, often due to additional text beyond original license
    // "N/A" - Matching validation not applicable
    // See: https://spdx.github.io/spdx-spec/v2.3/license-matching-guidelines-and-templates/
    string match = 7;
  }

  /*
   * SPDX exception grant an exception to a license condition or additional
   * permissions beyond those granted in a license.
   * NOTE: this is not a stand-alone license.
   */
  message SPDXException {
    // SPDX exception identifier, "Classpath-exception-2.0"
    string id = 1;
    // SPDX exception registry name, "Classpath exception 2.0"
    string full_name = 2;
    // SPDX exception JSON URL
    string details_url = 3;
    // Reference URLs
    repeated string see_also = 5;
    // Whether this SPDX exception is deprecated by the SPDX License List
    bool is_deprecated = 6;
  }

  // SPDX license identifier, "GPL-2.0-only", "MIT"
  string id = 1;
  // Official SPDX registry name (empty if license not in SPDX registry)
  string full_name = 2;
  // JSON API URL for full details
  string details_url = 4;
  // HTML page URL
  string reference_url = 5;
  // Whether this license is deprecated by the SPDX License List
  bool is_deprecated = 6;
  // Whether the Free Software Foundation considers this license libre/free
  bool is_fsf_libre = 7;
  // Whether this license is approved by the Open Source Initiative (OSI)
  bool is_osi_approved = 8;
  // Related URLs
  repeated string see_also = 9;
  // Structured cross-references with validation info
  repeated SPDXCrossRef cross_refs = 10;
  // SPDX exceptions applied to this license (empty if none)
  repeated SPDXException exceptions = 11;
}

/*
 * OSADL compliance metadata providing license analysis and compatibility information.
 */
message OSADL {

  // OSADL use case with structured obligations.
  message OSADLUseCase {
    // "Binary delivery", "Network service", "Source code delivery"
    string name = 1;
    // Human-readable obligation text
    string obligation_text = 2;
    // Machine-readable structured obligations with Language/Action/Term breakdown
    string obligation_json = 3;
  }

  // Indicates whether the license contains copyleft obligations requiring derivative works to use the same license
  bool copyleft_clause = 1;
  // Indicates whether the license contains patent-related clauses or considerations
  bool patent_hints = 2;
  // List of licenses that are compatible for combination with this license
  repeated string compatibility = 3;
  // List of licenses that are compatible when depending on components with this license
  repeated string depending_compatibility = 4;
  // List of licenses that are incompatible and cannot be combined with this license
  repeated string incompatibility = 5;
  // Structured use cases with specific obligations for different distribution scenarios
  repeated OSADLUseCase use_cases = 6;
}


/*
 * Individual license identification with SPDX ID and human-readable name.
 * 
 * Provides basic license information including standardized identifiers and 
 * human-readable names for discovered licenses in software components.
 */
message LicenseInfo {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      example: "{\"id\": \"GPL-2.0\", \"full_name\": \"GNU General Public License v2.0 only\"}"
    }
  };

  // License identifier:
  //  - For SPDX registry licenses: Standard SPDX ID
  //  - For non-registry licenses: licenseRef-<custom_license_name>
  string id = 1;

  // Best human-readable license name (normalized when possible)
  // - For SPDX licenses: Official SPDX name (e.g., "MIT License", "GNU General Public License v2.0 only")
  // - For non SPDX licenses: Best normalized name from SCANOSS database or original statement
  string full_name = 2;
}

/*
 * Comprehensive license metadata container.
 * 
 * Provides detailed information about a specific license including SPDX registry data,
 * OSADL compliance metadata, license type classification, and official references.
 */
message LicenseDetails {
  // Best human-readable license name (normalized when possible)
  // - For SPDX licenses: Official SPDX name (e.g., "MIT License", "GNU General Public License v2.0 only")
  // - For non SPDX licenses: Best normalized name from SCANOSS database or original statement
  string full_name = 1;

  // License type classification (PERMISSIVE, COPYLEFT, COMMERCIAL, etc.)
  LicenseType type = 2;
  // SPDX registry metadata - always present, SPDX.id always populated, other fields empty if license not in SPDX License list
  SPDX spdx = 3;
  // OSADL compliance metadata - optional, contains compatibility and obligation information
  OSADL osadl = 4;
  // For future use, specific SCANOSS metadata
  //SCANOSS scanoss = 5;
}

/*
 * Request message for license metadata and compliance information.
 * 
 * Used by both GetDetails and GetObligations endpoints to query comprehensive
 * license information including SPDX registry data, OSADL compliance metadata,
 * license type classification, and usage obligations for a specific license identifier.
 */
message LicenseRequest {
  // SPDX identifier or licenseRef (e.g., "MIT", "licenseRef-GitLab-Enterprise")
  string id = 1;
}

/*
 * License information for a specific component identified by PURL and version.
 */
message ComponentLicenseInfo {
  // Package URL (PURL) uniquely identifying the component. See Common API Types documentation for format and resolution logic.
  string purl = 1;
  // Echoes the client's version constraint from the request. See Common API Types documentation for resolution logic
  string requirement = 2;
  // Specific version of the component that was analyzed
  string version = 3;
  // SPDX expression when licensing terms are clearly determinable from source analysis
  string statement = 4;
  // Individual licenses identified in the component
  repeated LicenseInfo licenses = 5;
}