{
  "swagger": "2.0",
  "info": {
    "title": "SCANOSS License Service",
    "description": "License service provides license intelligence for software components.",
    "version": "2.0",
    "contact": {
      "name": "scanoss-licenses",
      "url": "https://github.com/scanoss/licenses",
      "email": "support@scanoss.com"
    }
  },
  "tags": [
    {
      "name": "License"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v2/licenses/details": {
      "post": {
        "summary": "GetDetails Method",
        "operationId": "License_GetDetails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2LicenseDetailsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2LicenseRequest"
            }
          }
        ],
        "tags": [
          "License"
        ]
      }
    },
    "/api/v2/licenses/echo": {
      "post": {
        "summary": "Returns the same message that was sent, used for health checks and connectivity testing",
        "operationId": "License_Echo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2EchoResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2EchoRequest"
            }
          }
        ],
        "tags": [
          "License"
        ]
      }
    },
    "/api/v2/licenses/obligations": {
      "post": {
        "summary": "GetObligations Method",
        "operationId": "License_GetObligations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ObligationsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2LicenseRequest"
            }
          }
        ],
        "tags": [
          "License"
        ]
      }
    },
    "/api/v2/licenses/purl": {
      "post": {
        "summary": "Get license information for a list of software components",
        "description": "Retrieves license information for software components identified by Package URLs.\nExamines source code, license files, and package metadata to determine which licenses apply to each component.\nReturns license data in both individual SPDX license and SPDX expressions when determinable.\n",
        "operationId": "License_GetLicenses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2BatchLicenseResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Represents a list of software component to be analyzed by SCANOSS API services.\nAllows analysis of multiple software components in a single API call, improving performance over individual requests.\n",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ComponentBatchRequest"
            }
          }
        ],
        "tags": [
          "License"
        ],
        "externalDocs": {
          "url": "https://github.com/scanoss/papi/blob/main/protobuf/scanoss/api/licenses/v2/README.md"
        }
      }
    }
  },
  "definitions": {
    "OSADLOSADLUseCase": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "\"Binary delivery\", \"Network service\", \"Source code delivery\""
        },
        "obligationText": {
          "type": "string",
          "title": "Human-readable obligation text"
        },
        "obligationJson": {
          "type": "string",
          "title": "Machine-readable structured obligations with Language/Action/Term breakdown"
        }
      },
      "description": "OSADL use case with structured obligations."
    },
    "SPDXSPDXCrossRef": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "isValid": {
          "type": "boolean"
        },
        "isLive": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string"
        },
        "isWaybackLink": {
          "type": "boolean"
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "match": {
          "type": "string"
        }
      }
    },
    "SPDXSPDXException": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "\"Classpath-exception-2.0\""
        },
        "fullName": {
          "type": "string",
          "title": "\"Classpath exception 2.0\""
        },
        "detailsUrl": {
          "type": "string",
          "title": "SPDX exception JSON URL"
        },
        "seeAlso": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Reference URLs"
        },
        "isDeprecated": {
          "type": "boolean",
          "title": "Exception is deprecated"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v2BatchLicenseResponse": {
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ComponentLicenseInfo"
          },
          "title": "License info for each component in the batch"
        },
        "status": {
          "$ref": "#/definitions/v2StatusResponse"
        }
      }
    },
    "v2ComponentBatchRequest": {
      "type": "object",
      "example": {
        "components:": [
          {
            "purl": "pkg:github/scanoss/engine@1.0.0"
          },
          {
            "purl": "pkg:github/scanoss/engine",
            "requirement": "^1.0.0"
          }
        ]
      },
      "properties": {
        "components": {
          "type": "array",
          "example": [
            {
              "purl": "pkg:github/scanoss/engine@1.0.0"
            },
            {
              "purl": "pkg:github/scanoss/engine",
              "requirement": "^1.0.0"
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ComponentRequest"
          },
          "description": "Array of component requests to analyze"
        }
      },
      "description": "Represents a list of software component to be analyzed by SCANOSS API services.\nAllows analysis of multiple software components in a single API call, improving performance over individual requests.\n"
    },
    "v2ComponentLicenseInfo": {
      "type": "object",
      "example": {
        "purl": "pkg:github/scanoss/engine@1.0.0",
        "requirement": "",
        "version": "1.0.0",
        "statement": "MIT",
        "licenses": [
          {
            "id": "MIT",
            "full_name": "MIT License"
          }
        ]
      },
      "properties": {
        "purl": {
          "type": "string",
          "example": "pkg:github/scanoss/engine@1.0.0",
          "description": "Package URL (PURL) uniquely identifying the component. See Common API Types documentation for format and resolution logic"
        },
        "requirement": {
          "type": "string",
          "example": "^1.0.0",
          "description": "Echoes the client's version constraint from the request. See Common API Types documentation for resolution logic"
        },
        "version": {
          "type": "string",
          "example": "1.0.0",
          "description": "Specific version of the component that was analyzed"
        },
        "statement": {
          "type": "string",
          "example": "MIT OR licenseRef-GitLab-Enterprise",
          "description": "SPDX expression when licensing terms are clearly determinable from source analysis"
        },
        "licenses": {
          "type": "array",
          "example": [
            {
              "id": "MIT",
              "full_name": "MIT License"
            },
            {
              "id": "licenseRef-GitLab-Enterprise",
              "full_name": "GitLab Enterprise Edition License"
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2LicenseInfo"
          },
          "description": "Individual licenses identified in the component"
        }
      },
      "description": "License information for a specific component identified by PURL and version",
      "title": "ComponentLicenseInfo"
    },
    "v2ComponentRequest": {
      "type": "object",
      "example": {
        "purl": "pkg:github/scanoss/engine@1.0.0"
      },
      "properties": {
        "purl": {
          "type": "string",
          "example": "pkg:github/scanoss/engine",
          "description": "Package URL identifying the component to analyze."
        },
        "requirement": {
          "type": "string",
          "example": "^1.0.0",
          "description": "Version constraint for component resolution when PURL lacks explicit version."
        }
      },
      "description": "Represents a software component to be analyzed by SCANOSS API services.\nCombines a Package URL for component identification with optional version constraints for resolution.\n"
    },
    "v2EchoRequest": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "title": "Echo Message Request"
    },
    "v2EchoResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "title": "Echo Message Response"
    },
    "v2LicenseDetails": {
      "type": "object",
      "properties": {
        "fullName": {
          "type": "string",
          "title": "Best human-readable license name (normalized when possible)\n- For SPDX licenses: Official SPDX name (e.g., \"MIT License\", \"GNU General Public License v2.0 only\")\n- For non SPDX licenses: Best normalized name from SCANOSS database or original statement\nNote: May match SPDX.full_name for registry licenses, but serves different purpose (best effort vs official registry)"
        },
        "type": {
          "$ref": "#/definitions/v2LicenseType"
        },
        "spdx": {
          "$ref": "#/definitions/v2SPDX",
          "title": "Always present - SPDX.id always populated, other fields empty if not in SPDX License list"
        },
        "osadl": {
          "$ref": "#/definitions/v2OSADL",
          "title": "Optional - OSADL compliance metadata"
        }
      }
    },
    "v2LicenseDetailsResponse": {
      "type": "object",
      "properties": {
        "license": {
          "$ref": "#/definitions/v2LicenseDetails",
          "title": "Full license details with all metadata"
        },
        "status": {
          "$ref": "#/definitions/v2StatusResponse"
        }
      }
    },
    "v2LicenseInfo": {
      "type": "object",
      "example": {
        "id": "MIT",
        "full_name": "MIT License"
      },
      "properties": {
        "id": {
          "type": "string",
          "example": "MIT",
          "description": "License identifier.\nFor SPDX registry licenses: Standard SPDX ID.\nFor non-registry licenses: licenseRef-\u003ccustom_license_name\u003e"
        },
        "fullName": {
          "type": "string",
          "example": "MIT License",
          "description": "Human-readable license name."
        }
      },
      "description": "Individual license identification with SPDX ID and human-readable name"
    },
    "v2LicenseRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "SPDX identifier or licenseRef (e.g., \"MIT\", \"licenseRef-GitLab-Enterprise\")"
        }
      },
      "title": "GetDetails \u0026 GetObligations endpoint"
    },
    "v2LicenseType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PERMISSIVE",
        "COPYLEFT",
        "COMMERCIAL",
        "PROPRIETARY",
        "PUBLIC_DOMAIN"
      ],
      "default": "UNKNOWN"
    },
    "v2OSADL": {
      "type": "object",
      "properties": {
        "copyleftClause": {
          "type": "boolean"
        },
        "patentHints": {
          "type": "boolean"
        },
        "compatibility": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependingCompatibility": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "incompatibility": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useCases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/OSADLOSADLUseCase"
          }
        }
      },
      "description": "OSADL compliance metadata providing license analysis and compatibility information."
    },
    "v2ObligationsResponse": {
      "type": "object",
      "properties": {
        "obligations": {
          "$ref": "#/definitions/v2OSADL",
          "title": "OSADL compliance data with use cases and obligations"
        },
        "status": {
          "$ref": "#/definitions/v2StatusResponse"
        }
      }
    },
    "v2SPDX": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "\"GPL-2.0-only\", \"MIT\" - the SPDX license identifier"
        },
        "fullName": {
          "type": "string",
          "title": "Official SPDX registry name (empty if license not in SPDX registry)"
        },
        "detailsUrl": {
          "type": "string",
          "title": "JSON API URL for full details"
        },
        "referenceUrl": {
          "type": "string",
          "title": "HTML page URL"
        },
        "isDeprecated": {
          "type": "boolean",
          "title": "License is deprecated"
        },
        "isFsfLibre": {
          "type": "boolean",
          "title": "FSF considers it libre/free"
        },
        "isOsiApproved": {
          "type": "boolean"
        },
        "seeAlso": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Related URLs"
        },
        "crossRefs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SPDXSPDXCrossRef"
          },
          "title": "Structured cross-references with validation info"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SPDXSPDXException"
          },
          "title": "SPDX exceptions applied to this license (empty if none)"
        }
      },
      "description": "SPDX license registry metadata."
    },
    "v2StatusCode": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "SUCCESS",
        "SUCCEEDED_WITH_WARNINGS",
        "WARNING",
        "FAILED"
      ],
      "default": "UNSPECIFIED",
      "title": "Status code Enum"
    },
    "v2StatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v2StatusCode",
          "title": "response status"
        },
        "message": {
          "type": "string",
          "title": "Status message"
        }
      },
      "title": "Detailed response details"
    }
  }
}
